WHITESPACE = _{ " " | "\n" }

COMMENT = _{ "//" ~ (!NEWLINE ~ ANY)* }

// FILE STRUCTURE

file = { SOI ~ header ~ namespace ~ EOI }

header = _{ ns_import* }

ns_import = _{ "mod" ~ identifier ~ ";" }

decl = { sentence_decl | ns_decl | proc_decl }

// NAMESPACES

ns_decl   = { "mod" ~ identifier ~ "{" ~ namespace ~ "}" }
namespace = { decl* }

// LITERALS

nil = { "nil" }

bool = { "true" | "false" }

int = @{ ASCII_DIGIT+ }

char_lit = ${ "'" ~ lit_char ~ "'" }
lit_char = @{
    !("'" | "\\") ~ ANY
  | "\\" ~ ("'" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
  | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

identifier   = @{ id_non_digit ~ (id_non_digit | ASCII_DIGIT)* }
id_non_digit = _{ ASCII_ALPHA | "_" }

symbol = { "@" ~ (identifier | string) }

string    = ${ "\"" ~ str_inner ~ "\"" }
str_inner = @{ str_char* }
str_char  =  {
    !("\"" | "\\") ~ ANY
  | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
  | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

literal = { bool | int | char_lit | symbol | nil }

// VALUES

value_expr = {
  //   closure
  // | 
  literal
  | tuple_expr
  // | match_expr
  | copy
  | path
  | identifier
}

copy = { "*" ~ identifier }

tuple_expr = {
    "(" ~ ")"
  | "(" ~ value_expr ~ ("," ~ value_expr)* ~ ")"
}

builtin = { "#" ~ identifier ~ builtin_args? }

builtin_args = _{
    "(" ~ builtin_arg ~ ("," ~ builtin_arg)* ~ ")"
}
builtin_arg  =  { qualified_label | int }

qualified_label = {
    "'" ~ identifier ~ ("::" ~ identifier)*
}

// SENTENCE
sentence_decl = {
    "sentence" ~ identifier ~ "{" ~ sentence ~ "}"
}

sentence = { raw_word* }

raw_word = {
    stack_bindings
  | value_expr
  | builtin
}

stack_bindings = {
    "[" ~ "]"
  | "[" ~ binding ~ ("," ~ binding)* ~ "]"
}

bindings = {
    "(" ~ ")"
  | "(" ~ binding ~ ("," ~ binding)* ~ ")"
}
binding  = { tuple_binding | drop_binding | literal | identifier }

drop_binding  = { "^" }
tuple_binding = {
    "(" ~ ")"
  | "(" ~ binding ~ ("," ~ binding)* ~ ")"
}

// PROC

proc_decl          = { "proc" ~ binding ~ identifier ~ "=>" ~ expr }
expr = {
  "R{" ~ sentence ~ "}"
}

// OTHER


// delete = { "^" ~ identifier }

// expr = { path | literal | func_call | identifier | builtin | delete | copy }

path = { "this" ~ ("." ~ identifier)* }

// sentence      = { sentence_body }
// sentence_body = { expr* }

// and_then = { sentence ~ ";" ~ code }

// if_statement = { sentence ~ "if" ~ "{" ~ code ~ "}" ~ "else" ~ "{" ~ code ~ "}" }

// bind = { "bind" ~ identifier ~ ";" ~ code }

// match_block = { "match" ~ "(" ~ int ~ ")" ~ "{" ~ match_cases ~ "}" ~ "else" ~ "{" ~ code ~ "}" }

// match_cases = { match_case* }
// match_case  = { literal ~ "=>" ~ "{" ~ code ~ "}" }

// code = { bind | and_then | if_statement | match_block | sentence }

// code_decl = { "let" ~ identifier ~ "=" ~ "{" ~ code ~ "}" ~ ";" }

// Proc syntax


// match_decl = { "match_proc" ~ identifier ~ "{" ~ match_cases ~ "}" }

// block      = { statements ~ endpoint }
// statements = { statement* }

// statement = _{ let_statement }

// let_statement = { "let" ~ bindings ~ "=" ~ expr ~ ";" }

// endpoint    = _{ become | raw_statement | if_endpoint | match_block | unreachable }
// become      =  { "become" ~ func_call }
// unreachable =  { "" }

// if_endpoint = {
//     "if" ~ value_expr ~ "{" ~ block ~ "}" ~ "else" ~ "{" ~ block ~ "}"
// }

// expr = _{ request_call | response_call | func_call | value_expr }

// request_call  = { "req" ~ func_call_inner }
// response_call = { "resp" ~ func_call_inner }

// func_call        =  { func_call_inner }
// func_call_inner  = _{ func_name ~ func_call_args }
// func_name        = _{ func_name_copied | path | identifier }
// func_name_copied =  { "(" ~ "*" ~ identifier ~ ")" }

// func_call_args = {
//     "(" ~ ")"
//   | "(" ~ value_expr ~ ("," ~ value_expr)* ~ ")"
// }

// closure = {
//     func_name ~ "&" ~ func_call_args
// }

// match_block = { "match" ~ "{" ~ match_cases ~ "}" }

// match_cases = _{ match_case* }
// match_case  =  { bindings ~ "=>" ~ "{" ~ block ~ "}" }

// // New stuff

// match_expr = { "match" ~ value_expr ~ "{" ~ match_expr_case* ~ "}" }

// match_expr_case = { bindings ~ "=>" ~ "{" ~ block ~ "}" }
