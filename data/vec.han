use 'crate::builtin::add;
use 'crate::builtin::lt;
use 'crate::builtin::eq;
use 'crate::array;

def malloc match {
    #start{size} => #cont{#await_malloc{}, (#some{#malloc{size}})},
    #cont{#await_malloc{}, (#some{array})} => #end{array},
}

// new := capacity | malloc | (0, capacity, -)

def new_convert match {
    #start{capacity, array} => #end{(0, capacity, array)},
}

def new_helper [(capacity, state) => state match {
    #cont{state, deps} => #cont{#poll_malloc{capacity, state}, deps},
    #end{array} => #start{capacity, array} 'new_convert,
}]

def new match {
    #start{capacity} => (*capacity, #start{capacity} 'malloc) 'new_helper,
    #cont{#poll_malloc{capacity, state}, deps} => (capacity, #cont{state, deps} 'malloc) 'new_helper,
}

def push match {
    #start{((size, capacity, array), item)} => {
        (*size, *capacity) 'eq if {
            (#start{(size, *capacity, array), (*capacity, capacity) 'add}, item) 'poll_grow_helper
        } else {
            let array = (array, *size, item) 'array::set;
            let size = (size, 1) 'add;
            #end{(size, capacity, array)}
        }
    },
    #cont{#send_grow{grow, item}, deps} => (#cont{#send_grow{grow}, deps}, item) 'poll_grow_helper,
}

def poll_grow_helper [(grow, item) => grow 'grow match {
    #end{(size, capacity, array)} => {
        let array = (array, *size, item) 'array::set;
        let size = (size, 1) 'add;
        #end{(size, capacity, array)}
    },
    #cont{grow, deps} => #cont{#send_grow{grow, item}, deps},
}]

def grow match {
    #start{((size, capacity, array), new_capacity)} => {
        (*capacity, *new_capacity) 'lt if {
            #cont{#await_malloc{(size, capacity, array), *new_capacity}, (#some{#malloc{new_capacity}})}
        } else {
            let ^ = new_capacity;
            #end{(size, capacity, array)}
        }
    },
    #cont{#await_malloc{(size, capacity, array), new_capacity}, (#none{})} => 
        #cont{#await_malloc{(size, capacity, array), new_capacity}, (#none{})},
    #cont{#await_malloc{(size, capacity, array), new_capacity}, (#some{new_array})} => {
        (#start{(array, new_array, *size)}, size, capacity, new_capacity) 'poll_memcpy_helper
    },
    #cont{#reply_memcpy{memcpy, size, capacity, new_capacity}, (#none{})} => {
        (#cont{memcpy, ()}, size, capacity, new_capacity) 'poll_memcpy_helper
    },
    #cont{#await_free{vec}, (#some{()})} => {
        #end{vec}
    },
}

def poll_memcpy_helper [(memcpy, size, capacity, new_capacity) => memcpy 'memcpy match {
    #end{(src, dst)} => {
        let ^ = capacity;
        #cont{#await_free{(size, new_capacity, dst)}, (#some{#free{src}})}
    },
    #cont{memcpy, ()} => #cont{#reply_memcpy{memcpy, size, capacity, new_capacity}, (#none{})},
}]

def memcpy match {
    #start{(src, dst, len)} => { 
        (src, dst, 0, len) 'memcpy_helper
    },
    #cont{#cp{src, dst, offset, len}, ()} => { 
        (src, dst, offset, len) 'memcpy_helper
    },
}

fn (src, dst, offset, len) memcpy_helper => (*offset, *len) 'lt if {
    let (src, item) = (src, *offset) 'array::get;
    let dst = (dst, *offset, item) 'array::set;
    #cont{#cp{src, dst, (offset, 1) 'add, len}, ()}
} else {
    let ^ = (offset, len);
    #end{(src, dst)}
}


fn method vec => {
    method match {
        #new{capacity} => {
            #req{#await_malloc{*capacity}, #alloc{#malloc{capacity}}}
        },
        #reply{#await_malloc{capacity}, array} => {
            #resp{(0, capacity, array)}
        },
        #push{self, item} => {
            let (size, capacity, array) = self;
            #req{#await_push_memset{*size, capacity}, #memset{array, size, item}}
        },
        #size{self} => {
            let (size, capacity, array) = self;
            #resp{((*size, capacity, array), size)}
        },
        #reply{#await_push_memset{size, capacity}, #ok{array}} => {
            #resp{(size, capacity, array)}
        },
    }
}

// fn args grow => {
//     args c#and_then
//         c#await fn (size, capacity, array) => {
//             let new_capacity = (*capacity, *capacity) 'add;
//             #req{(size, capacity, array, *new_capacity), #alloc{#malloc{new_capacity}}}
//         }
//     then c#and_then
//         c#do fn ((size, old_capacity, old_array, new_capacity), new_array) => (0, size, old_capacity, old_array, new_capacity, new_array)
//     then c#and_then 
//         c#loop c#do fn (idx, size, old_capacity, old_array, new_capacity, new_array) => {
//             (*idx, *size) 'eq if {
//                 let ^ = (idx, old_capacity);
//                 #break{(old_array, size, new_capacity, new_array)}
//             } else {
//                 let (old_array, item) = (old_array, *idx) 'array::get;
//                 let new_array = (new_array, *idx, item) 'array::set;
//                 #continue{((idx, 1) 'add, size, old_capacity, old_array, new_capacity, new_array)}
//             }
//         }
//     then c#and_then
//         c#await fn (old_array, size, new_capcity, new_array) => {
//             #req{(size, new_capcity, new_array), #alloc{#free{old_array}}}
//         }
//     then
//         c#do fn (self, ()) => self
// }

// fn args push => {
//     args c#and_then
//         c#do fn ((size, capacity, array), item) => {
//             let full = (*size, *capacity) 'eq;
//             (((size, capacity, array), item), full)
//         }
//     then c#and_then
//         c#if 
//             fn args => args match {
//                 #call{(self, item)} => #call{self} 'grow match {
//                     #req{state, msg} => #req{(item, state), msg},
//                     #resp{value} => #resp{(item, value)},
//                 },
//                 #reply{(item, state), msg} => #reply{state, msg} 'grow match {
//                     #req{state, msg} => #req{(item, state), msg},
//                     #resp{value} => #resp{(item, value)},
//                 },
//             }
//         else
//             c#do fn (self, item) => (item, self)
//     then
//         c#do fn (item, (size, capacity, array)) => {
//             let array = (array, *size, item) 'array::set;
//             let size = (size, 1) 'add;
//             (size, capacity, array)
//         }
// }

// mod tests {
//     fn args main => args match {
//         (#nil{}, #enumerate{}) => (#nil{}, #a{}),
//         (#a{}, #next{}) => (#b{}, #some{@new}),
//         (#b{}, #next{}) => (#e{}, #none{}),

//         (#nil{}, #run{@new}) => {
//             let #req{t, #stall{}} = #run{} fn x => {x 'test_new};
//             let #req{t, #stall{}} = #reply{t, #cont{}} 'test_new;
//             let #req{t, #alloc{#malloc{8}}} = #reply{t, #cont{}} 'test_new;
//             let #req{t, #stall{}} = #reply{t, @handle} 'test_new;
            
//             let #req{t, #stall{}} = #reply{t, #cont{}} 'test_new;
//             let #req{t, #stall{}} = #reply{t, #cont{}} 'test_new;
//             let #resp{()} = #reply{t, #cont{}} 'test_new;
//             // let #req{t, #stall{}} = #reply{t, #cont{}} 'test_new;
//             // let #req{t, #alloc{#malloc{8}}} = #reply{t, #cont{}} 'test_new;
//             // let #req{t, #stall{}} = #reply{t, #cont{}} 'test_new;
//             // let ^=t;
//             ()
//         },
//     }

//     // mach () main => {
//     //     #stall{} yield 'foo
//     // }

//     // fn args sum => args match {
//     //     #call{} => #req{#start{0}, #stall{}},
//     //     #reply{#start{acc}, #cont{}} => #req{#iter_reply{acc}, #iter{#next{}}},
//     //     #reply{#iter_reply{acc}, reply} => reply match {
//     //         #some{} => #req{#iter_clone{acc}, #iter{#item{#clone{}}}},
//     //         #none{} => #resp{acc},
//     //     },
//     //     #reply{#iter_clone{acc}, num} => #req{#start{(acc, num) 'crate::builtin::add}, #stall{}},
//     // }

//     // fn args and_then<A, B> => args match {
//     //     #call{args} => {
//     //         #call{args} A match {
//     //             #req{state, msg} => #req{#a{state}, msg},
//     //             #resp{a} => #call{a} B match {
//     //                 #req{state, msg} => #req{#b{state}, msg},
//     //                 #resp{val} => #resp{val},
//     //             },
//     //         }
//     //     },
//     //     #reply{#a{state}, msg} => #reply{state, msg} A match {
//     //         #req{state, msg} => #req{#a{state}, msg},
//     //         #resp{a} => #call{a} B match {
//     //             #req{state, msg} => #req{#b{state}, msg},
//     //             #resp{val} => #resp{val},
//     //         },
//     //     },
//     //     #reply{#b{state}, msg} => #reply{state, msg} B match {
//     //         #req{state, msg} => #req{#b{state}, msg},
//     //         #resp{val} => #resp{val},
//     //     },
//     // }

//     // fn args loop<B> => args match {
//     //     #call{init} => #call{init} B match {
//     //         #req{state, msg} => #req{#body{state}, msg},
//     //         #resp{#continue{args}} => #req{#continue{args}, #stall{}},
//     //         #resp{#break{result}} => #resp{result},
//     //     },
//     //     #reply{#body{state}, msg} => #reply{state, msg} B match {
//     //         #req{state, msg} => #req{#body{state}, msg},
//     //         #resp{#continue{args}} => #req{#continue{args}, #stall{}},
//     //         #resp{#break{result}} => #resp{result},
//     //     },
//     //     #reply{#continue{args}, #cont{}} => #call{args} B match {
//     //         #req{state, msg} => #req{#body{state}, msg},
//     //         #resp{#continue{args}} => #req{#continue{args}, #stall{}},
//     //         #resp{#break{result}} => #resp{result},
//     //     },
//     // }

//     // proc foo {
//     //     delegate<cond> 
//     //     if x else y
//     // }
    
//     // proc () sum {
//     //     (0, 0) 'sum_loop match {
//     //         #req{}
//     //     }
//     // }

//     // proc sum_loop {
//     //     0: acc => #req{(1, acc), #iter{#next{}}},
//     //     1: (acc, res) => res match {
//     //         #some{} => (0, acc) sum_loop_some match {
                
//     //         },
//     //         #none{} => #resp{#break{acc}},
//     //     },
//     //     2: (acc, #cont{}) => {
//     //         #req{(3, acc), #item{#clone{}}},
//     //     }
//     // }

//     // proc sum_loop_some {
//     //     0: acc => 
//     // }
//     // fn (state, args) main => match state {
//     //     (0, ()) => {#req{(1, ()), #stall{}}}
//     //     (1, ()) => args 'foo,
//     // }

//     // mach () sum => {
//     //     0 loop acc {
//     //         #iter{#next{}} yield match {
//     //             #some{} => {
//     //                 let val = #item{#clone{}} yield;
//     //                 (val, acc) 'builtin::add continue;
//     //             },
//     //             #none{} => acc break,
//     //         }
//     //     }
//     // }

//     // mach () sum => {
//     //     0 loop_start: acc {
//     //         #iter{#next{}} yield match {
//     //             #some{} => {
//     //                 let val = #item{#clone{}} yield;
//     //                 (val, acc) 'builtin::add goto<loop_start>;
//     //             },
//     //             #none{} => acc goto<loop_end>,
//     //         }
//     //     }
//     //     loop_end:
//     // }

//     // fn (state, args) sum => match {
//     //     (0, ()) => { args bind<()> 0 #req{(1, stack), #stall{}}},
//     //     (1, stack) => args bind<#cont{}> stack save<acc> #req{(2, stack), #iter{#next{}}}},
//     //     (2, stack) => stack bind<acc> args match {
//     //         #some{} => #req{(3, stack), #item{#clone{}}},
//     //         #none{} => #req{(4, acc), #stall{}},
//     //     }
//     //     (3, stack) => stack bind<acc> args bind<val> (val, acc) 'builtin::add #req{(1, (-)), #stall{}},
//     //     (4, acc) => args bind<#cont{}> #resp{acc} 
//     // }

//     fn method test_new => {
//         method match {
//             #run{} => #req{#call_unbound{#run{}}, #stall{}},
//             #reply{#call_unbound{req}, #cont{}} => req 'test_new_unbound match {
//                 #resp{resp} => #resp{resp},
//                 #req{s, #vec{req}} => #req{#call_vec{s, req}, #stall{}},
//             },
//             #reply{#call_vec{s, req}, #cont{}} => req 'super::vec match {
//                 #resp{resp} => #req{#call_unbound{#reply{s, resp}}, #stall{}},
//                 #req{v, req} => #req{#call_vec_reply{s, v}, req},
//             },
//             #reply{#call_vec_reply{s, v}, reply} => #reply{v, reply} 'super::vec match {
//                 #resp{resp} => #req{#call_unbound{#reply{s, resp}}, #stall{}},
//                 #req{v, req} => #req{#call_vec_reply{s, v}, req},
//             },
//         }
//     }

//     fn method test_new_unbound => {
//         method match {
//             #run{} => #req{#on_new{}, #vec{#new{8}}},
//             #reply{#on_new{}, v} => #req{#on_size{}, #vec{#size{v}}},
//             #reply{#on_size{}, (^, 0)} => #resp{()},
//         }
//     }
// }