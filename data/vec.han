use 'crate::builtin::add;

fn method vec => {
    method match {
        #new{capacity} => {
            #req{#await_malloc{*capacity}, #alloc{#malloc{capacity}}}
        },
        #reply{#await_malloc{capacity}, array} => {
            #resp{(0, capacity, array)}
        },
        #push{self, item} => {
            let (size, capacity, array) = self;
            #req{#await_push_memset{*size, capacity}, #memset{array, size, item}}
        },
        #size{self} => {
            let (size, capacity, array) = self;
            #resp{((*size, capacity, array), size)}
        },
        #reply{#await_push_memset{size, capacity}, #ok{array}} => {
            #resp{(size, capacity, array)}
        },
    }
}

mod tests {
    fn args main => args match {
        (#nil{}, #enumerate{}) => (#nil{}, #a{}),
        (#a{}, #next{}) => (#b{}, #some{@new}),
        (#b{}, #next{}) => (#e{}, #none{}),

        (#nil{}, #run{@new}) => {
            let #req{t, #stall{}} = #run{} 'test_new;
            let #req{t, #stall{}} = #reply{t, #cont{}} 'test_new;
            let #req{t, #alloc{#malloc{8}}} = #reply{t, #cont{}} 'test_new;
            let #req{t, #stall{}} = #reply{t, @handle} 'test_new;
            
            let #req{t, #stall{}} = #reply{t, #cont{}} 'test_new;
            let #req{t, #stall{}} = #reply{t, #cont{}} 'test_new;
            let #resp{()} = #reply{t, #cont{}} 'test_new;
            // let #req{t, #stall{}} = #reply{t, #cont{}} 'test_new;
            // let #req{t, #alloc{#malloc{8}}} = #reply{t, #cont{}} 'test_new;
            // let #req{t, #stall{}} = #reply{t, #cont{}} 'test_new;
            // let ^=t;
            ()
        },
    }

    // mach () main => {
    //     #stall{} yield 'foo
    // }

    // fn (state, args) main => match state {
    //     (0, ()) => {#req{(1, ()), #stall{}}}
    //     (1, ()) => args 'foo,
    // }

    // mach () sum => {
    //     0 loop acc {
    //         #iter{#next{}} yield match {
    //             #some{} => {
    //                 let val = #item{#clone{}} yield;
    //                 (val, acc) 'builtin::add continue;
    //             },
    //             #none{} => acc break,
    //         }
    //     }
    // }

    // mach () sum => {
    //     0 loop_start: acc {
    //         #iter{#next{}} yield match {
    //             #some{} => {
    //                 let val = #item{#clone{}} yield;
    //                 (val, acc) 'builtin::add goto<loop_start>;
    //             },
    //             #none{} => acc goto<loop_end>,
    //         }
    //     }
    //     loop_end:
    // }

    // fn (state, args) sum => match {
    //     (0, ()) => { args bind<()> 0 #req{(1, stack), #stall{}}},
    //     (1, stack) => args bind<#cont{}> stack save<acc> #req{(2, stack), #iter{#next{}}}},
    //     (2, stack) => stack bind<acc> args match {
    //         #some{} => #req{(3, stack), #item{#clone{}}},
    //         #none{} => #req{(4, acc), #stall{}},
    //     }
    //     (3, stack) => stack bind<acc> args bind<val> (val, acc) 'builtin::add #req{(1, (-)), #stall{}},
    //     (4, acc) => args bind<#cont{}> #resp{acc} 
    // }

    fn method test_new => {
        method match {
            #run{} => #req{#call_unbound{#run{}}, #stall{}},
            #reply{#call_unbound{req}, #cont{}} => req 'test_new_unbound match {
                #resp{resp} => #resp{resp},
                #req{s, #vec{req}} => #req{#call_vec{s, req}, #stall{}},
            },
            #reply{#call_vec{s, req}, #cont{}} => req 'super::vec match {
                #resp{resp} => #req{#call_unbound{#reply{s, resp}}, #stall{}},
                #req{v, req} => #req{#call_vec_reply{s, v}, req},
            },
            #reply{#call_vec_reply{s, v}, reply} => #reply{v, reply} 'super::vec match {
                #resp{resp} => #req{#call_unbound{#reply{s, resp}}, #stall{}},
                #req{v, req} => #req{#call_vec_reply{s, v}, req},
            },
        }
    }

    fn method test_new_unbound => {
        method match {
            #run{} => #req{#on_new{}, #vec{#new{8}}},
            #reply{#on_new{}, v} => #req{#on_size{}, #vec{#size{v}}},
            #reply{#on_size{}, (^, 0)} => #resp{()},
        }
    }
}