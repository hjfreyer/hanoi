
mod builtin;
mod io;
mod ssv;
mod iter;
mod list;
mod str;
mod multi_iter;

mod tests {
    proc enumerate(caller, @next) {
        let () = caller(@eos);        
    }

    mod cases {
    }

    proc run(caller, case_name) {
        R{ @cases this #get #get @exec }
    }
}

proc parseint_factory(caller) {
    let (p) = this.str.parseint();
    let () = caller(p);
    become this.parseint_factory()
}
        
proc multi_parseint_factory(caller) {            
    let (p) = this.multi_iter.multi_iter_map(this.parseint_factory);
    let (c) = this.multi_iter.multi_iter_to_iter();
    let (p) = this.builtin.compose(p, c);

    let () = caller(p);
    become this.multi_parseint_factory()
}

proc abs_diff(caller, a, b) {
    let (lt) = this.builtin.lt(*a, *b);
    if lt {
        let (diff) = this.builtin.sub(b, a);
        become caller(diff)
    } else {
        let (diff) = this.builtin.sub(a, b);
        become caller(diff)
    }
}

proc iter_abs_diff(caller, @next) {
    let (caller) = req caller(@a, @next);
    match {
        (@eos) => {
            let () = resp caller(@eos);
        }
        (@yield, a) => {
            let (caller, @yield, b) = req caller(@b, @next);
            let (d) = this.abs_diff(a, b);
            let (caller, @next) = resp caller(@yield, d);
            become this.iter_abs_diff(caller, @next)
        }
    }    
}

proc reduce_sum(caller) {
    become caller(this.reduce_sum_impl&(0))
}

proc reduce_sum_impl(acc, caller, @get) {
    let (caller) = req caller(@next);
    match {
        (@eos) => {
            become caller(@end, acc)
        }
        (@yield, item) => {
            let (acc) = this.builtin.add(acc, item);
            become this.reduce_sum_impl(acc, caller, @get)
        }
    }   
}

proc solve_the_thing(caller, @get) {
    let (ssv) = this.ssv.parser();

    let (p) = this.multi_iter.multi_iter_map(this.multi_parseint_factory);

    let (numerical) = this.builtin.compose(ssv, p);
    let (as_lists) = this.multi_iter.mat2dtolists();
    let (as_lists) = this.builtin.compose(numerical, as_lists);
    let (caller, as_lists) = this.builtin.fwd_all(caller, as_lists, @get);
    let (transposed) = this.multi_iter.transpose2(as_lists);

    let (as_lists) = this.multi_iter.mat2dtolists();
    let (as_lists) = this.builtin.compose(transposed, as_lists);
    let (@end, as_lists) = as_lists(@get);

    let (@resp, as_lists, @some, a) = as_lists(@pop_front);
    let (@resp, as_lists, @some, b) = as_lists(@pop_front);
    let (@resp, as_lists, @none) = as_lists(@pop_front);

    let (@end, a) = a(@into_iter);
    let (@end, b) = b(@into_iter);

    let (a_sorted) = this.builtin.compose(a, this.iter.mergesort);
    let (b_sorted) = this.builtin.compose(b, this.iter.mergesort);

    let (c) = this.builtin.mk_pair(a_sorted, b_sorted);

 //   let (c) = this.builtin.container_builder();
 //   let (c) = c(@bind, @a, a_sorted);
 //   let (c) = c(@bind, @b, b_sorted);
 //   let (c) = c(@build);

    let (diffs) = this.iter_abs_diff;
    let (diffs) = this.builtin.compose(c, diffs);

    let (sum) = this.reduce_sum();
    let (sum) = this.builtin.compose(diffs, sum);
    let (@end, sum) = sum(@get);

    become caller(@end, sum)
}

proc main(caller) {
    let (sol) = this.builtin.compose(this.io.stdin_chars, this.solve_the_thing);
    let (caller, num) = this.builtin.fwd_all(caller, sol, @get);
    
    let (caller) = req caller(@print, num);


    //let (ints) = this.builtin.bind(this.parseint_list_of_list_of_str, @iter, ssv);
//    
//    
//
//    let (mapped) = this.bind(this.iter.multi_map, @iter, ssv);
//
//    let (parseint) = this.parseint();
//
//    let (mapped) = this.bind(mapped, @reducer, parseint);
//
//    let () = mapped(@next);

//
   // let (ssv) = this.builtin.bind(this.dump, @iter, ints);
//
    //let (caller, ^, @eos) = this.builtin.fwd_req(caller, ssv, @get);
//
    let () = req caller(@halt);

    //let () = this.tests.cases.mergesort_full();
    //let (iter) = this.iter.symbol_chars&(@foobar);
    //let (aq, bq) = this.bind(this.iter.split, @iter, iter);
    //let (aq, @yield, 'f') = aq(@next);
    //let (aq, @yield, 'o') = aq(@next);
    //let (aq, @yield, 'a') = aq(@next);
    //let (aq, @eos) = aq(@next);
    //let (bq, @yield, 'o') = bq(@next);
    //let (bq, @yield, 'b') = bq(@next);
    //let (bq, @yield, 'r') = bq(@next);
    //let (bq, @eos) = bq(@next);
}