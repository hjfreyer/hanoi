mod builtin;
mod str;
mod list;

proc multi_iter_map(caller, constructor) {
    become caller(this.multi_iter_map_impl&(constructor))
}

proc multi_iter_map_impl(constructor, caller, @next) {
    let (caller) = req caller(@next);
    match {
        (@eos) => {
            become caller(@end, @eos)
        }
        (@start) => {
            let (caller) = resp caller(@start);
            let (constructor, fn) = constructor();
            let (caller) = this.multi_iter_map_within(caller, fn);
            become this.multi_iter_map_impl(constructor, caller)
        }
    }
}
// @next  <-- @next
// @start --> @start
// @req @foo  <--  fn @get   <-- @req @get

proc multi_iter_map_within(next, up, fn) {
    match {
        (@next) => {
            become next(up, @next)
        }
        (@req) => {
            become this.multi_iter_map_call_fn(next, up, fn)
        }
    }
}

proc multi_iter_map_call_fn(next, up, fn) {
    let () = fn();
    match {
        (@req, fn) => {
            let (up) = req up(@req);
            become this.multi_iter_map_call_fn(next, up, fn)
        }
        (@resp, fn) => {
            let (up) = resp up();
            become this.multi_iter_map_within(next, up, fn)
        }
        (@end) => {
            let (up) = resp up();  // Forward last response
            become next(up)
        }
    }
}

proc transpose2(caller, list) {
    become caller(this.transpose2_impl&(list))
}

proc transpose2_impl(list, caller, @next) {
    let (fronts) = this.list.new();
    let (rests) = this.list.new();
    let (fronts, rests) = this.take_first_row(fronts, rests, list);
    let (@resp, fronts, is_empty) = fronts(@is_empty);
    if is_empty {
        let () = resp caller(@eos);
    } else {
        let (caller, @next) = resp caller(@start);
        let (@end, fronts) = fronts(@into_iter);
        let (caller, @eos) = this.builtin.fwd_all(caller, fronts, @next);
        let (caller, @next) = resp caller(@eos);
        become this.transpose2_impl(rests, caller, @next)
    }
}

proc take_first_row(caller, fronts, rests, list_of_lists) {
    let (@resp, list_of_lists) = list_of_lists(@pop_front);
    match {
        (@none) => {
            become caller(fronts, rests)
        }
        (@some, next_list) => {
            let (@resp, next_list) = next_list(@pop_front);
            match {
                (@none) => {
                    become this.take_first_row(caller, fronts, rests, list_of_lists)
                }
                (@some, item) => {
                    let (@resp, fronts) = fronts(@push_back, item);
                    let (@resp, rests) = rests(@push_back, next_list);
                    become this.take_first_row(caller, fronts, rests, list_of_lists)
                }
            }
        }
    }
}


proc multi_iter_to_iter(caller) {
    become caller(this.multi_iter_to_iter_impl&())
}

proc multi_iter_to_iter_impl(caller, @next) {
    let (caller) = req caller(@next);
    match {
        (@start) => {
            let (caller, @ok, value) = req caller(@req, @get);
            let (caller, @next) = resp caller(@yield, value);
            become this.multi_iter_to_iter_impl(caller, @next)
        }
        (@eos) => {
            become caller(@end, @eos)
        }
    }
}


proc mat2dtolists(caller) {
    let (list) = this.list.new();
    become caller(this.mat2dtolists_impl&(list))
}

proc mat2dtolists_impl(list, caller, @get) {
    let (caller) = req caller(@next);
    match {
        (@start) => {
            let (collector) = this.iter_to_list();
            let (caller, row) = this.with_leading_req(caller, collector, @get);
            let (@resp, list) = list(@push_back, row);
            become this.mat2dtolists_impl(list, caller, @get)
        }
        (@eos) => {
            become caller(@end, list)
        }
    }
}

proc with_leading_req(next, up, down) {
    let () = down();
    match {
        (@req, down) => {
            let (up) = req up(@req);
            become this.with_leading_req(next, up, down)
        }
        (@resp, down) => {
            let (up) = resp up();
            become this.with_leading_req(next, up, down)
        }
        (@end) => {
            let (up) = resp up();
            become next(up)
        }
    }
}

proc iter_to_list(caller) {
    let (list) = this.list.new();
    become caller(this.iter_to_list_impl&(list))
}

proc iter_to_list_impl(list, caller, @get) {
    let (caller) = req caller(@next);
    match {
        (@eos) => {
            become caller(@end, list)
        }
        (@yield, item) => {
            let (@resp, list) = list(@push_back, item);
            become this.iter_to_list_impl(list, caller, @get)
        }
    }
}


mod tests {
    proc enumerate(caller, @next) {
        let (caller, @next) = caller(@yield, @parseint_list_of_str);
        let (caller, @next) = caller(@yield, @parseint_list_of_str_to_iter);
        let (caller, @next) = caller(@yield, @parseint_list_of_list_of_str);
        let (caller, @next) = caller(@yield, @transpose2_empty);
        let (caller, @next) = caller(@yield, @transpose2_single_row);
        let (caller, @next) = caller(@yield, @transpose2_single_col);
        let (caller, @next) = caller(@yield, @transpose2_full);
        let (caller, @next) = caller(@yield, @multi_iter_map_empty);
        let () = caller(@eos);        
    }

    mod cases {
        proc parseint_list_of_str(caller) {
            let (p) = this.super.super.multi_iter_map(this.parseint_factory);

            let (@req, p, @next) = p(@next);
            let (@resp, p, @start) = p(@start);

            let (@req, p, @req, @next) = p(@req, @get);
            let (@req, p, @req, @next) = p(@yield, '1');
            let (@req, p, @req, @next) = p(@yield, '2');
            let (@req, p, @req, @next) = p(@yield, '3');
            let (@resp, p, @ok, 123) = p(@eos);
            let (@req, p, @next) = p(@next);
            let (@resp, p, @start) = p(@start);
            let (@req, p, @req, @next) = p(@req, @get);
            let (@req, p, @req, @next) = p(@yield, '4');
            let (@req, p, @req, @next) = p(@yield, '5');
            let (@req, p, @req, @next) = p(@yield, '6');
            let (@resp, p, @ok, 456) = p(@eos);
            let (@req, p, @next) = p(@next);
            let (@end, @eos) = p(@eos);
            
            let () = caller(@pass);
        }

        proc parseint_list_of_str_to_iter(caller) {
            let (p) = this.super.super.multi_iter_map(this.parseint_factory);
            let (c) = this.super.super.multi_iter_to_iter();
            let (p) = this.super.super.builtin.compose(p, c);

            let (@req, p, @next) = p(@next);
            let (@req, p, @req, @next) = p(@start);
            let (@req, p, @req, @next) = p(@yield, '1');
            let (@req, p, @req, @next) = p(@yield, '2');
            let (@req, p, @req, @next) = p(@yield, '3');
            let (@resp, p, @yield, 123) = p(@eos);
            let (@req, p, @next) = p(@next);
            let (@req, p, @req, @next) = p(@start);
            let (@req, p, @req, @next) = p(@yield, '4');
            let (@req, p, @req, @next) = p(@yield, '5');
            let (@req, p, @req, @next) = p(@yield, '6');
            let (@resp, p, @yield, 456) = p(@eos);
            let (@req, p, @next) = p(@next);
            let (@end, @eos) = p(@eos);
            
            let () = caller(@pass);
        }

        proc parseint_list_of_list_of_str(caller) {
            let (p) = this.super.super.multi_iter_map(this.multi_parseint_factory);

            let (@req, p, @next) = p(@next);
            let (@resp, p, @start) = p(@start);

            let (@req, p, @req, @next) = p(@req, @next);
            let (@req, p, @req, @req, @next) = p(@start);
            let (@req, p, @req, @req, @next) = p(@yield, '1');
            let (@req, p, @req, @req, @next) = p(@yield, '2');
            let (@req, p, @req, @req, @next) = p(@yield, '3');
            let (@resp, p, @yield, 123) = p(@eos);


            let (@req, p, @req, @next) = p(@req, @next);
            let (@req, p, @req, @req, @next) = p(@start);
            let (@req, p, @req, @req, @next) = p(@yield, '4');
            let (@req, p, @req, @req, @next) = p(@yield, '5');
            let (@req, p, @req, @req, @next) = p(@yield, '6');
            let (@resp, p, @yield, 456) = p(@eos);
            
            let (@req, p, @req,  @next) = p(@req, @next);
            let (@resp, p, @eos) = p(@eos);

            // Skip one entirely.
            let (@req, p, @next) = p(@next);
            let (@resp, p, @start) = p(@start);

            let (@req, p, @next) = p(@next);
            let (@resp, p, @start) = p(@start);
            
            let (@req, p, @req, @next) = p(@req, @next);
            let (@req, p, @req, @req, @next) = p(@start);
            let (@req, p, @req, @req, @next) = p(@yield, '1');
            let (@req, p, @req, @req, @next) = p(@yield, '2');
            let (@req, p, @req, @req, @next) = p(@yield, '3');
            let (@resp, p, @yield, 123) = p(@eos);
            
            let (@req, p, @req, @next) = p(@req, @next);
            let (@resp, p, @eos) = p(@eos);

            let (@req, p, @next) = p(@next);
            let (@end, @eos) = p(@eos);
            
            let () = caller(@pass);
        }
        

        proc parseint_factory(caller) {
            let (p) = this.super.super.str.parseint();
            let () = caller(p);
            become this.parseint_factory()
        }
                
        proc multi_parseint_factory(caller) {            
            let (p) = this.super.super.multi_iter_map(this.parseint_factory);
            let (c) = this.super.super.multi_iter_to_iter();
            let (p) = this.super.super.builtin.compose(p, c);

            let () = caller(p);
            become this.multi_parseint_factory()
        }


        proc transpose2_empty(caller) {
            let (list) = this.super.super.list.new();

            let (t) = this.super.super.transpose2(list);
            let (@resp, t, @eos) = t(@next);

            let () = caller(@pass);
        }

        proc transpose2_single_row(caller) {
            let (row) = this.super.super.list.new();
            let (@resp, row) = row(@push_back, @foo);
            let (@resp, row) = row(@push_back, @bar);
            let (@resp, row) = row(@push_back, @baz);

            let (list) = this.super.super.list.new();
            let (@resp, list) = list(@push_back, row);

            let (t) = this.super.super.transpose2(list);
            let (@resp, t, @start) = t(@next);
            let (@resp, t, @yield, @foo) = t(@next);
            let (@resp, t, @eos) = t(@next);
            let (@resp, t, @start) = t(@next);
            let (@resp, t, @yield, @bar) = t(@next);
            let (@resp, t, @eos) = t(@next);
            let (@resp, t, @start) = t(@next);
            let (@resp, t, @yield, @baz) = t(@next);
            let (@resp, t, @eos) = t(@next);
            let (@resp, t, @eos) = t(@next);
            
            let () = caller(@pass);
        }

        proc transpose2_single_col(caller) {
            let (list) = this.super.super.list.new();

            let (row) = this.super.super.list.new();
            let (@resp, row) = row(@push_back, @foo);
            let (@resp, list) = list(@push_back, row);
            
            let (row) = this.super.super.list.new();
            let (@resp, row) = row(@push_back, @bar);
            let (@resp, list) = list(@push_back, row);
            
            let (row) = this.super.super.list.new();
            let (@resp, row) = row(@push_back, @baz);
            let (@resp, list) = list(@push_back, row);

            let (t) = this.super.super.transpose2(list);
            let (@resp, t, @start) = t(@next);
            let (@resp, t, @yield, @foo) = t(@next);
            let (@resp, t, @yield, @bar) = t(@next);
            let (@resp, t, @yield, @baz) = t(@next);
            let (@resp, t, @eos) = t(@next);
            let (@resp, t, @eos) = t(@next);
            
            let () = caller(@pass);
        }

        proc transpose2_full(caller) {
            let (list) = this.super.super.list.new();

            let (row) = this.super.super.list.new();
            let (@resp, row) = row(@push_back, @foo);
            let (@resp, row) = row(@push_back, @bar);
            let (@resp, list) = list(@push_back, row);
            
            let (row) = this.super.super.list.new();
            let (@resp, row) = row(@push_back, @baz);
            let (@resp, row) = row(@push_back, @qux);
            let (@resp, list) = list(@push_back, row);
            
            let (row) = this.super.super.list.new();
            let (@resp, row) = row(@push_back, 1);
            let (@resp, row) = row(@push_back, 2);
            let (@resp, list) = list(@push_back, row);

            let (t) = this.super.super.transpose2(list);
            let (@resp, t, @start) = t(@next);
            let (@resp, t, @yield, @foo) = t(@next);
            let (@resp, t, @yield, @baz) = t(@next);
            let (@resp, t, @yield, 1) = t(@next);
            let (@resp, t, @eos) = t(@next);
            let (@resp, t, @start) = t(@next);
            let (@resp, t, @yield, @bar) = t(@next);
            let (@resp, t, @yield, @qux) = t(@next);
            let (@resp, t, @yield, 2) = t(@next);
            let (@resp, t, @eos) = t(@next);
            let (@resp, t, @eos) = t(@next);
            
            let () = caller(@pass);
        }
                
        proc multi_iter_map_empty(caller) {
            let (m) = this.super.super.multi_iter_map(this.parseint_factory);

            let (@req, m, @next) = m(@next);
            let (@end, @eos) = m(@eos);
            let () = caller(@pass);
        }
    }

    proc run(caller, case_name) {
        R{ @cases this #get #get @exec }
    }
}
