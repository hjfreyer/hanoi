
mod csv {

    let quoted = {};

    let parser = {
        bind caller;
        bind iter;
        bind next;
        caller next #curry iter #curry @exec;

        match (1) {
            @eos => {
                bind eos;
                bind caller;
                @end caller #curry @exec ^eos
            }
            @yield => {
                bind iternext;
                bind char;
                bind yld;
                bind caller;

                match (2) {
                    ',' => {
                        bind next;
                        iternext next #curry 
                            @nextfield caller #curry #curry @exec ^yld ^char;
                        bind caller;
                        bind iternext;
                        caller iternext this.parser #curry #curry @exec
                    }

                    '\n' => {
                        bind next; 
                            iternext next #curry 
                                @nextrow caller #curry #curry @exec ^yld ^char;
                        bind caller;
                        bind iternext;
                            caller iternext this.parser #curry #curry @exec
                    }
                } else {
                    bind next;
                        iternext next #curry char @fieldchar caller #curry #curry #curry @exec ^yld;
                    bind caller;
                    bind iternext;
                        caller iternext this.parser #curry #curry @exec

                }
            }
        } else {
            @panic
        }

    };
}

mod tests {
    match_proc enumerate {
        (caller, @next) => {
            let (caller, next_tag) = caller(@yield, @assert_true);
            // let (caller, next_tag) = caller(@yield, @symbol_iter);
            // let (caller, next_tag) = caller(@yield, @basic_csv);
            // let (caller, next_tag) = caller(@yield, @manually_drive_map);
            let () = caller(@eos);        
        }
    }

    mod cases {
        let assert_true = {
            bind caller;
                @pass caller #curry @exec
        };

        let basic_csv = {
            bind caller;
            bind next;
                caller next #curry
                @"h,e\n" 0 this.super.super.iter.symbol_chars #curry #curry
                    this.super.super.csv.parser #curry #curry @exec;
            bind cont;
            bind char;
            bind tag;
            bind caller;
            bind next;
                tag @fieldchar #assert_eq char 'h' #assert_eq caller next #curry cont #curry @exec;
            bind cont;
            bind tag;
            bind caller;
            bind next;
                tag @nextfield #assert_eq caller next #curry cont #curry @exec;
            bind cont;
            bind char;
            bind tag;
            bind caller;
            bind next;
                tag @fieldchar #assert_eq char 'e' #assert_eq caller next #curry cont #curry @exec;
            bind cont;
            bind tag;
            bind caller;
            bind next;
                tag @nextrow #assert_eq caller next #curry cont #curry @exec;
            bind tag;
            bind caller;
                tag @end #assert_eq
                @pass caller #curry @exec
        };

        let symbol_iter = {
            bind caller;
            bind next;
                caller next #curry @"foo" 0 this.super.super.iter.symbol_chars #curry #curry #curry @exec;
            bind char;
            bind tag;
            bind cont;
            bind caller;
            bind next;
                tag @yield #assert_eq char 'f' #assert_eq caller next #curry cont #curry @exec;
            bind cont;
            bind char;
            bind tag;
            bind caller;
            bind next;
                tag @yield #assert_eq char 'o' #assert_eq caller next #curry cont #curry @exec;
            bind cont;
            bind char;
            bind tag;
            bind caller;
            bind next;
                tag @yield #assert_eq char 'o' #assert_eq caller next #curry cont #curry @exec;
            bind tag;
            bind caller;
                tag @eos #assert_eq
                @pass caller #curry @exec
        };

        let manually_drive_map = {
            bind caller;
            bind next;
                caller next #curry this.super.super.iter.map #curry @exec;
            bind cont;
            bind reqiter;
            bind caller;
            bind next;
                reqiter @requestiter #assert_eq
                caller next #curry 1 @yield cont #curry #curry #curry @exec;
            bind cont;
            bind one;
            bind reqfn;
            bind caller;
            bind next;
                reqfn @requestfn #assert_eq one 1 #assert_eq
                caller next #curry 2 @ok cont #curry #curry #curry @exec;
            bind cont;
            bind two;
            bind yld;
            bind caller;
            bind next;
                yld @yield #assert_eq two 2 #assert_eq
                caller next #curry cont #curry @exec;
            bind cont;
            bind req;
            bind caller;
            bind next;
                req @requestiter #assert_eq
                caller next #curry @eos cont #curry #curry @exec;
            bind eos;
            bind caller;
                eos @eos #assert_eq @pass caller #curry @exec
        };
    }

    let run = {
        bind caller;
        bind case;
            caller case this.cases #get #curry @exec 
    };
}

mod iter {
    let symbol_len = {
        bind caller;
        bind symbol;
            symbol #symbol_len caller #curry @exec
    };

    let symbol_char_at = {
        bind caller;
        bind symbol;
        bind offset;
            symbol offset #symbol_char_at caller #curry @exec
    };

    let eq = {
        bind caller;
        bind a;
        bind b;
        a b #eq caller #curry @exec
    };

    let add = {
        bind a;
        bind b;
        bind caller;
            a b #add @ok this.add caller #curry #curry #curry @exec
    };

    proc symbol_chars_inner(offset, symbol, caller) {
        let (len) = this.symbol_len(*symbol);
        let (are_eq) = this.eq(*offset, *len);
        if are_eq {
            caller(@eos)
        } else {
            let (char) = this.symbol_char_at(*offset, *symbol);
            let (caller) = caller(@yield, char);
            let (next_offset) = this.add(offset, 1);
            this.symbol_chars_inner(next_offset, symbol, caller)
        }
    }

    proc symbol_chars(caller, symbol) {
        this.symbol_chars_inner(0, symbol, caller)
    }

    match_proc map {
        (caller, @next) => {
            match caller(@request, @iter, @next) {
                (caller, @eos) => {
                    let () = caller(@eos);

                }
                (caller, @yield, item) => {
                    match caller(@request, @fn, item) {
                        (caller, @ok, applied) => {
                            let (caller) = caller(@yield, applied);
                            this.map(caller)
                        }
                    }
                }

            }
        }
//        match caller(@requestiter) {
//            (caller, @eos) => {
//                let () = caller(@eos);
//            }
//            (caller, @yield, item) => {
//                match caller(@requestfn, item) {
//                    (@ok, applied, caller) => {
//                        let (caller) = caller(@yield, applied);
//                        this.map(caller)
//                    }
//                }
//            }
//        }
    }

    proc double(caller, x) {
        let (_, ok, res) = this.add(*x, x);
        let () = caller(@ok, res);
        this.double()
    }

    let curry1 = {
        bind caller;
        bind arg;
        bind fn;
            arg fn #curry caller #curry @exec
    };

    let curry2 = {
        bind caller;
        bind arg0;
        bind arg1;
        bind fn;
            arg0 arg1 fn #curry #curry caller #curry @exec
    };

    let curry3 = {
        bind caller;
        bind arg0;
        bind arg1;
        bind arg2;
        bind fn;
            arg0 arg1 arg2 fn #curry #curry #curry caller #curry @exec
    };

    let bind_requestfn = {
        bind fn;
        bind inner;
        bind caller;
            fn inner this.do_bind_requestfn #curry #curry caller #curry @exec
    };

    proc do_bind_requestfn(inner, fn, caller) {
        match inner() {
            (inner, @request, @fn, input) => {
                let (fn, caller, ok, applied) = this.do_bind_requestfn_call_fn(fn, caller, input);
                this.do_bind_requestfn(inner, fn, caller, ok, applied)
            }
            (inner) => {
                let (caller) = caller();
                this.do_bind_requestfn(inner, fn, caller)
            }
        }
    }

    proc do_bind_requestfn_call_fn(metacaller, fn, caller) {
        match fn() {
            (fn, @ok, applied) => {
                metacaller(fn, caller, @ok, applied)
            }
            (fn) => {
                let (caller) = caller();
                this.do_bind_requestfn_call_fn(metacaller, fn, caller)
            }
        }
    }
}

let main = {
    bind next;
        this.iter.double this.iter.map next this.iter.bind_requestfn #curry #curry #curry @exec;
    bind bound;
    bind next;
        @next next bound #curry #curry @exec;
  
    bind nxt;
    bind iter;
    bind req;
    bind cont;
    bind next;
        req @request #assert_eq iter @iter #assert_eq nxt @next #assert_eq
        1 @yield next cont @exec;

    bind item;
    bind yield;
    bind continue;
    bind next;
        2 item #assert_eq yield @yield #assert_eq
        @next next continue @exec;

    bind nxt;
    bind iter;
    bind req;
    bind cont;
    bind next;
        req @request #assert_eq iter @iter #assert_eq nxt @next #assert_eq
        5 @yield next cont @exec;

    bind item;
    bind yield;
    bind continue;
    bind next;
        10 item #assert_eq yield @yield #assert_eq
        @next next continue @exec;

    bind nxt;
    bind iter;
    bind req;
    bind cont;
    bind next;
        req @request #assert_eq iter @iter #assert_eq nxt @next #assert_eq
        @eos next cont @exec;
    
    bind eos;
    bind continue;
    bind next;
        eos @eos #assert_eq @pass
};