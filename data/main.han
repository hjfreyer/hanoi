
//mod builtin;
//mod io;
//mod ssv;
//mod iter;
//mod list;
//mod str;
//mod adv1p1;
//mod multi_iter;
//
//mod tests {
//    proc enumerate(caller, @next) {
////        let (caller, @next) = caller(@yield, @basic_csv);
//        let () = caller(@eos);        
//    }
//
//    mod cases {
//        proc basic_csv(caller) {
//            let (iter) = this.super.super.iter.symbol_chars(@"foo,bar
//baz");
//            let (bound) = this.super.super.builtin.bind(
//                this.super.super.csv.start, 
//                @iter, 
//                iter);
//
//            let (@resp, bound, @startrow) = bound(@next);
//            let (@resp, bound, @startfield) = bound(@next);
//            let (@resp, bound, @yield, 'f') = bound(@next);
//            let (@resp, bound, @yield, 'o') = bound(@next);
//            let (@resp, bound, @yield, 'o') = bound(@next);
//            let (@resp, bound, @endfield) = bound(@next);
//            let (@resp, bound, @startfield) = bound(@next);
//            let (@resp, bound, @yield, 'b') = bound(@next);
//            let (@resp, bound, @yield, 'a') = bound(@next);
//            let (@resp, bound, @yield, 'r') = bound(@next);
//            let (@resp, bound, @endfield) = bound(@next);
//            let (@resp, bound, @endrow) = bound(@next);
//            let (@resp, bound, @startrow) = bound(@next);
//            let (@resp, bound, @startfield) = bound(@next);
//            let (@resp, bound, @yield, 'b') = bound(@next);
//            let (@resp, bound, @yield, 'a') = bound(@next);
//            let (@resp, bound, @yield, 'z') = bound(@next);
//            let (@resp, bound, @endfield) = bound(@next);
//            let (@resp, bound, @endrow) = bound(@next);
//            let (@resp, bound, @eos) = bound(@next);
//            let () = caller(@pass);
//        }
//
//    }
//
//    proc run(caller, case_name) {
//        R{ @cases this #get #get @exec }
//    }
//}
//
//mod csv {
//    proc start(caller, @next) {
//        let (caller) = req caller(@next);
//        match {
//            (@eos) =>  {
//                let () = resp caller(@eos);
//            }
//            (@yield, char) => {
//                let (caller, @next) = resp caller(@startrow);
//                let (caller) = resp caller(@startfield);
//                become this.default_handle_char(caller, char)
//            }
//        }
//    }
//
//    proc default_handle_char(caller) {
//        match {
//            ('\n') => {
//                let (caller, @next) = resp caller(@endfield);
//                let () = resp caller(@endrow);
//                become this.start()
//            }
//            ('"') => {
//                become this.quoted(caller)
//            }
//            ('\\') => {
//                become this.escaped(caller)
//            }
//            (',') => {
//                let (caller, @next) = resp caller(@endfield);
//                let () = resp caller(@startfield);
//                become this.non_quoted()               
//            }
//            (char) => {
//                let () = resp caller(@yield, char);
//                become this.non_quoted()
//            }
//        }
//    }
//
//    proc non_quoted(caller) {
//        let (caller) = req caller(@next);
//        match {
//            (@eos) => {
//                let (caller, @next) = resp caller(@endfield);
//                let (caller, @next) = resp caller(@endrow);
//                let () = resp caller(@eos);
//            }
//            (@yield, char) => {
//                become this.default_handle_char(caller, char)
//            }
//        }
//    }
//
//    proc quoted(caller) {
//        let (caller) = req caller(@next);
//        match {
//            (@eos) => {
//                let () = resp caller(@err, @nonterminatedquote);
//            }
//            (@yield, '"') => {
//                become this.non_quoted(caller)
//            }
//            (@yield, char) => {
//                let (caller, @next) = resp caller();
//                become this.default_handle_char(caller, char)
//            }
//        }
//    }
//}
//
//proc dump(caller, @get) {
//    let (caller) = req caller(@next);
//    match {
//        (@eos) => {
//            let (caller) = req caller(@print, @eos);
//            become this.dump(caller, @get)
//        }
//        (@start) => {
//            let (caller) = req caller(@print, @start);
//            become this.dump(caller, @get)
//        }
//        (@end) => {
//            let (caller) = req caller(@print, @end);
//            become this.dump(caller, @get)
//        }
//        (@yield, item) => {
//            let (caller) = req caller(@print, item);
//            become this.dump(caller, @get)
//        }
//    }
//}
//
//
//proc main(caller) {
//    let () = this.ssv.tests.cases.basic_string();
//
//    let (sol) = this.builtin.compose(this.io.stdin_chars, this.solve_the_thing);
//    let (caller, sol, num) = this.builtin.fwd_req(caller, sol, @get);
//    
//    let (caller) = req caller(@print, num);
//
//    //let (ints) = this.builtin.bind(this.parseint_list_of_list_of_str, @iter, ssv);
//    
//    
//
//    let (mapped) = this.bind(this.iter.multi_map, @iter, ssv);
//
//    let (parseint) = this.parseint();
//
//    let (mapped) = this.bind(mapped, @reducer, parseint);
//
//    let () = mapped(@next);
//
////
//   // let (ssv) = this.builtin.bind(this.dump, @iter, ints);
////
//    //let (caller, ^, @eos) = this.builtin.fwd_req(caller, ssv, @get);
////
//    let () = req caller(@halt);
//
//    //let () = this.tests.cases.mergesort_full();
//    //let (iter) = this.iter.symbol_chars&(@foobar);
//    //let (aq, bq) = this.bind(this.iter.split, @iter, iter);
//    //let (aq, @yield, 'f') = aq(@next);
//    //let (aq, @yield, 'o') = aq(@next);
//    //let (aq, @yield, 'a') = aq(@next);
//    //let (aq, @eos) = aq(@next);
//    //let (bq, @yield, 'o') = bq(@next);
//    //let (bq, @yield, 'b') = bq(@next);
//    //let (bq, @yield, 'r') = bq(@next);
//    //let (bq, @eos) = bq(@next);
//}

sentence double {
    [a]
    *a #add
}

sentence ints_alloc {
    (@start, 0)
}

sentence ints_start {

}

sentence ints {
    [closure, args]
    closure #untuple(2)
    [args, tag, start]
    tag @start #assert_eq
    args #untuple(1) @next #assert_eq
    [start]
    *start 1 #add
    [start, next]
    (@start, next) (@some, start)
}

sentence double_iter_alloc {
    #call('map::alloc)
    [map_closure]
    (@start, map_closure)
}

sentence double_iter {
    [closure, args]
    closure #untuple(2)
    [args, case, map_closure]
    case @start #assert_eq
    map_closure args #call('map::main) #call('double_iter_map_response)
}

sentence double_iter_map_response {
    [map_closure, map_response]
    #untuple(2)
    [map_closure, map_tag, map_arg]
    *map_tag @fn #eq #branch('double_iter_map_req_is_double, 'double_iter_map_response2)
}

sentence double_iter_map_response2 {
    [map_closure, map_tag, map_arg]
    *map_tag @iter #eq #branch('double_iter_map_req_is_iter, 'double_iter_map_req_is_resp)
}

sentence double_iter_map_req_is_double {
    [map_closure, map_target, map_args]
    map_target @fn #assert_eq
    map_args #call('double) 
    [map_closure, doubled]
    map_closure doubled #call('map::main) #call('double_iter_map_response)
}

sentence double_iter_map_req_is_iter {
    [map_closure, map_target, map_args]
    map_target @iter #assert_eq
    (@start, map_closure) (@iter, map_args)
}

sentence double_iter_map_req_is_resp {
    [map_closure, map_target, map_args]
    map_target @resp #assert_eq
    (@start, map_closure) (@resp, map_args)
}

mod map {
    sentence alloc {
        (@start, ())
    }

    sentence main {
        [closure, args]
        closure #untuple(2)
        [args, case, closure]
        closure #untuple(0)
        [args, case]
        *case @start #eq #branch('map_start, 'map2)
    }

    sentence main {
        [closure, args]
        let (case, ()) = closure;
        case match {
            @start => {
                let (@next) = args;
                (@on_next, ()) (@iter, (@next))
            }
            @on_next => {
                let (@some, val) = args;
                (@on_apply, ()) (@fn, val)
            }
            @on_apply => {
                let (mapped) = args;
                (@start, ()) (@resp, (@some, mapped))
            }
        }
    }

    sentence map2 {
        [args, case]
        *case @on_next #eq #branch('map_on_next, 'map3)
    }

    sentence map3 {
        [args, case]
        *case @on_apply #eq #branch('map_on_apply, 'panic)
    }

    sentence map_start {
        [args, case]
        case @start #assert_eq
        args (@next) #assert_eq
        (@on_next, ()) (@iter, (@next))
    }

    sentence map_on_next {
        [args, case]
        case @on_next #assert_eq

        args #untuple(2)
        [tag, val]
        tag @some #assert_eq
        [val]
        (@on_apply, ()) (@fn, val)
    }

    sentence map_on_apply {
        [mapped, case]
        case @on_apply #assert_eq
        (@start, ()) (@resp, (@some, mapped))
    }

    sentence panic {
        0 1 #assert_eq
    }
}


sentence main {
    #call('double_iter_alloc)
    (@next) #call('double_iter) (@iter, (@next)) #assert_eq
    (@some, 1) #call('double_iter) (@resp, (@some, 2)) #assert_eq

    (@next) #call('double_iter) (@iter, (@next)) #assert_eq
    (@some, 2) #call('double_iter) (@resp, (@some, 4)) #assert_eq

//    #call('map_alloc)
//    (@next) #call('map) (@iter, (@next)) #assert_eq
//    (@some, 1) #call('map) (@fn, 1) #assert_eq
//    2 #call('map) (@resp, (@some, 2)) #assert_eq
//    
//    (@next) #call('map) (@iter, (@next)) #assert_eq
//    (@some, 2) #call('map) (@fn, 2) #assert_eq
//    (@double, 4) #call('map) (@some, 4) #assert_eq
}