
mod builtin;

mod tests {
    proc enumerate(caller, @next) {
        let (caller, @next) = caller(@yield, @assert_true);
        let (caller, @next) = caller(@yield, @symbol_len);
        let (caller, @next) = caller(@yield, @symbol_iter);
        let (caller, @next) = caller(@yield, @basic_csv);
        let (caller, @next) = caller(@yield, @queue);
        let (caller, @next) = caller(@yield, @stack);
        let (caller, @next) = caller(@yield, @split);
        let (caller, @next) = caller(@yield, @merge_sorted);
        let (caller, @next) = caller(@yield, @is_empty);
        let (caller, @next) = caller(@yield, @is_not_empty);
        let (caller, @next) = caller(@yield, @mergesort_empty);
        let (caller, @next) = caller(@yield, @mergesort_singleton);
        let (caller, @next) = caller(@yield, @mergesort_two);
        let (caller, @next) = caller(@yield, @mergesort_full);
        let () = caller(@eos);        
    }

    mod cases {
        proc assert_true(caller) {
            let () = caller(@pass);
        }

        proc symbol_len(caller) {
            let (_, @ok, 3) = this.super.super.builtin.symbol_len(@foo);
            let () = caller(@pass);
        }

        proc basic_csv(caller) {
            let (iter) = this.super.super.iter.symbol_chars&(@"foo,bar
baz");
            let (bound) = this.super.super.iter.do_bind_iter&(
                this.super.super.csv.start, 
                @iter, 
                iter);

            let (bound, @startrow) = bound();
            let (bound, @startfield) = bound();
            let (bound, @yield, 'f') = bound();
            let (bound, @yield, 'o') = bound();
            let (bound, @yield, 'o') = bound();
            let (bound, @endfield) = bound();
            let (bound, @startfield) = bound();
            let (bound, @yield, 'b') = bound();
            let (bound, @yield, 'a') = bound();
            let (bound, @yield, 'r') = bound();
            let (bound, @endfield) = bound();
            let (bound, @endrow) = bound();
            let (bound, @startrow) = bound();
            let (bound, @startfield) = bound();
            let (bound, @yield, 'b') = bound();
            let (bound, @yield, 'a') = bound();
            let (bound, @yield, 'z') = bound();
            let (bound, @endfield) = bound();
            let (bound, @endrow) = bound();
            let (bound, @eos) = bound();
            let () = caller(@pass);
        }

        proc symbol_iter(caller) {
            let (iter) = this.super.super.iter.symbol_chars&(@foo);
            let (cont, @yield, 'f') = iter(@next);
            let (cont, @yield, 'o') = cont(@next);
            let (cont, @yield, 'o') = cont(@next);
            let (cont, @eos) = cont(@next);
            let () = caller(@pass);
        }

        proc queue(caller) {
            let (q) = this.super.super.queue_empty;
            let (q) = q(@push_back, @foo);
            let (q) = q(@push_back, @bar);
            let (q) = q(@push_back, @baz);
            let (q, @yield, @foo) = q(@next);
            let (q, @yield, @bar) = q(@next);
            let (q, @yield, @baz) = q(@next);
            let (q, @eos) = q(@next);
            let () = caller(@pass);
        }

        proc stack(caller) {
            let (q) = this.super.super.stack_empty;
            let (q) = q(@push_front, @foo);
            let (q) = q(@push_front, @bar);
            let (q) = q(@push_front, @baz);
            let (q, @yield, @baz) = q(@next);
            let (q, @yield, @bar) = q(@next);
            let (q, @yield, @foo) = q(@next);
            let (q, @eos) = q(@next);
            let () = caller(@pass);
        }

        proc split(caller) {
            let (iter) = this.super.super.iter.symbol_chars&(@foobar);
            let (aq, bq) = this.super.super.iter.split(iter);
            let (aq, @yield, 'f') = aq(@next);
            let (aq, @yield, 'o') = aq(@next);
            let (aq, @yield, 'a') = aq(@next);
            let (aq, @eos) = aq(@next);
            let (bq, @yield, 'o') = bq(@next);
            let (bq, @yield, 'b') = bq(@next);
            let (bq, @yield, 'r') = bq(@next);
            let (bq, @eos) = bq(@next);
            let () = caller(@pass);
        }

        proc merge_sorted(caller) {
            let (a) = this.super.super.queue_empty;
            let (a) = a(@push_back, 1);
            let (a) = a(@push_back, 3);
            let (a) = a(@push_back, 5);
            let (a) = a(@push_back, 6);
            let (b) = this.super.super.queue_empty;
            let (b) = b(@push_back, 2);
            let (b) = b(@push_back, 4);
            let (b) = b(@push_back, 6);
            let (b) = b(@push_back, 7);
            let (b) = b(@push_back, 8);

            let (m) = this.super.super.iter.merge_sorted(a, b);
            let (m, @yield, 1) = m(@next);
            let (m, @yield, 2) = m(@next);
            let (m, @yield, 3) = m(@next);
            let (m, @yield, 4) = m(@next);
            let (m, @yield, 5) = m(@next);
            let (m, @yield, 6) = m(@next);
            let (m, @yield, 6) = m(@next);
            let (m, @yield, 7) = m(@next);
            let (m, @yield, 8) = m(@next);
            let (m, @eos) = m(@next);

            let () = caller(@pass);
        }

        proc get_test_iter(caller) {
            let (a) = this.super.super.queue_empty;
            let (a) = a(@push_back, 0); 
            let (a) = a(@push_back, 4); 
            let (a) = a(@push_back, 2); 
            let (a) = a(@push_back, 9); 
            let (a) = a(@push_back, 7); 
            let (a) = a(@push_back, 8); 
            let (a) = a(@push_back, 6); 
            let (a) = a(@push_back, 5); 
            let (a) = a(@push_back, 3); 
            let (a) = a(@push_back, 1);
            become caller(a)
        }

        proc mergesort_empty(caller) {
            let (a) = this.super.super.iter.empty();
            let (a) = this.super.super.iter.mergesort(a);
            let (a, @eos) = a(@next);

            let () = caller(@pass);
        }

        proc mergesort_singleton(caller) {
            let (q) = this.super.super.queue_empty;
            let (q) = q(@push_back, @foo);
          
            let (a) = this.super.super.iter.mergesort(q);
            let (a, @yield, @foo) = a(@next);
            let (a, @eos) = a(@next);

            let () = caller(@pass);
        }
        
        proc mergesort_two(caller) {
            let (q) = this.super.super.queue_empty;
            let (q) = q(@push_back, 2);
            let (q) = q(@push_back, 1);
          
            let (a) = this.super.super.iter.mergesort(q);
            let (a, @yield, 1) = a(@next);
            let (a, @yield, 2) = a(@next);
            let (a, @eos) = a(@next);

            let () = caller(@pass);
        }

        proc mergesort_full(caller) {
            let (q) = this.get_test_iter();
          
            let (a) = this.super.super.iter.mergesort(q);

            let (a, @yield, 0) = a(@next); 
            let (a, @yield, 1) = a(@next);
            let (a, @yield, 2) = a(@next); 
            let (a, @yield, 3) = a(@next); 
            let (a, @yield, 4) = a(@next); 
            let (a, @yield, 5) = a(@next); 
            let (a, @yield, 6) = a(@next); 
            let (a, @yield, 7) = a(@next); 
            let (a, @yield, 8) = a(@next); 
            let (a, @yield, 9) = a(@next); 
            let (a, @eos) = a(@next);

            let () = caller(@pass);
        }
        
        proc is_empty(caller) {
            let (p) = this.super.super.iter.proxy;
            let (p, @req, @iter, @next) = this.super.super.iter.is_empty(p);
            let (p, @ok, true) = p(@eos);
            let () = caller(@pass);
        }

        proc is_not_empty(caller) {
            let (p) = this.super.super.iter.proxy;
            let (p, @req, @iter, @next) = this.super.super.iter.is_empty(p);
            let (p, @ok, false) = p(@yield, 3);
            let (p, @yield, 3) = p(@next);
            let (p, @req, @iter, @next) = p(@next);
            let (p, @eos) = p(@eos);
            
            let () = caller(@pass);
        }
    }

    proc run(caller, case_name) {
        R{ @cases this #get #get @exec }
    }
}

mod csv {
    proc start(caller) {
        let (caller) = caller(@req, @iter, @next);
        match {
            (@eos) =>  {
                let () = caller(@eos);
            }
            (@yield, char) => {
                let (caller) = caller(@startrow);
                let (caller) = caller(@startfield);
                become this.default_handle_char(caller, char)
            }
        }
    }

    proc default_handle_char(caller) {
        match {
            ('\n') => {
                let (caller) = caller(@endfield);
                let (caller) = caller(@endrow);
                become this.start(caller)
            }
            ('"') => {
                become this.quoted(caller)
            }
            ('\\') => {
                become this.escaped(caller)
            }
            (',') => {
                let (caller) = caller(@endfield);
                let (caller) = caller(@startfield);
                become this.non_quoted(caller)               
            }
            (char) => {
                let (caller) = caller(@yield, char);
                become this.non_quoted(caller)
            }
        }
    }

    proc non_quoted(caller) {
        let (caller) = caller(@req, @iter, @next);
        match {
            (@eos) => {
                let (caller) = caller(@endfield);
                let (caller) = caller(@endrow);
                let () = caller(@eos);
            }
            (@yield, char) => {
                become this.default_handle_char(caller, char)
            }
        }
    }

    proc quoted(caller) {
        let (caller) = caller(@req, @iter, @next);
        match {
            (@eos) => {
                let () = caller(@err, @nonterminatedquote);
            }
            (@yield, '"') => {
                become this.non_quoted(caller)
            }
            (@yield, char) => {
                let (caller) = caller();
                become this.default_handle_char(caller, char)
            }
        }
    }
}

mod iter {
    proc empty(caller) {
        become caller(this.empty_impl)
    }

    proc empty_impl(caller, @next) {
        let () = caller(@eos);
    }

    proc once(caller, item) {
        become caller(this.once_impl&(item))
    }

    proc once_impl(item, caller, @next) {
        let (caller, @next) = caller(@yield, item);
        let () = caller(@eos);
    }

    proc proxy(caller) {
        let (caller) = caller(@req, @iter);
        let (caller) = caller();
        become this.proxy(caller)
    }

    proc symbol_chars_inner(symbol, offset, caller, @next) {
        let (^, @ok, len) = this.super.builtin.symbol_len(*symbol);
        let (^, @ok, are_eq) = this.super.builtin.eq(*offset, len);
        if are_eq {
            let () = caller(@eos);
        } else {
            let (^, @ok, char) = this.super.builtin.symbol_char_at(*symbol, *offset);
            let (^, @ok, offset) = this.super.builtin.add(offset, 1);
            let () = caller(@yield, char);
            become this.symbol_chars_inner(symbol, offset)
        }
    }

    proc symbol_chars(symbol) {
        become this.symbol_chars_inner(symbol, 0)
    }

    proc map(caller, @next) {
        let (caller) = caller(@request, @iter, @next);
        match {
            (@eos) => {
                let () = caller(@eos);
            }
            (@yield, item) => {
                let (caller) = caller(@request, @fn, item);
                match {
                    (@ok, applied) => {
                        let () = caller(@yield, applied);
                        become this.map()
                    }
                }
            }
        }
    }

    proc do_bind_iter(inner, symbol, iter, caller) {
        let (inner) = inner();
        match {
            (@req, name) =>  {
                let (^, @ok, are_eq) = this.super.builtin.eq(*name, *symbol);
                if are_eq {
                    let (iter) = iter();
                    become this.do_bind_iter(inner, symbol, iter, caller)
                } else {
                    let (caller) = caller(@req, name);
                    become this.do_bind_iter(inner, symbol, iter, caller)
                }
            }
            (tag) => {
                let (caller) = caller(tag);
                become this.do_bind_iter(inner, symbol, iter, caller)
                
            }
        }
    }

    proc split(caller, iter) {
        let (^, @ok, aq, bq) = this.super.bind(this.split_builder&(this.super.queue_empty, this.super.queue_empty), @iter, iter);

        become caller(aq, bq)
    }

    proc split_builder(aq, bq, caller) {
        let (caller) = caller(@req, @iter, @next);
        match {
            (@eos) => {
                let () = caller(@ok, aq, bq);
            }
            (@yield, item) => {
                let (aq) = aq(@push_back, item);
                become this.split_builder(bq, aq, caller)
            }
        }
    }

    proc until_ok(next, up, down) {
        let (down) = down();
        match {
            (@ok) => {
                become next(up, down)
            }
            (tag) => {
                let (up) = up(tag);
                become this.until_ok(next, up, down)
            }
        }
    }

    proc cons(caller, head, tail) {
        become caller(this.cons_impl&(head, tail))
    }

    proc cons_impl(head, tail, caller, @next) {
        let (caller) = caller(@yield, head);
        become tail(caller)
    }
        
    proc merge_sorted(caller, a, b) {
        become caller(this.merge_sorted_impl&(a, b))
    }

    proc merge_sorted_impl(a, b, caller, @next) {
        let (a) = a(@next);
        match {
            (@eos) => {
                become b(caller, @next)
            }
            (@yield, a_item) => {
                let (b) = b(@next);
                match {
                    (@eos) => {
                        let (a) = this.cons(a_item, a);
                        become a(caller, @next)
                    }
                    (@yield, b_item) => {
                        let (lt) = this.super.builtin.lt(*a_item, *b_item);
                        if lt {
                            let (caller) = caller(@yield, a_item);
                            let (b) = this.cons(b_item, b);
                            become this.merge_sorted_impl(a, b, caller)
                        } else {
                            let (caller) = caller(@yield, b_item);
                            let (a) = this.cons(a_item, a);
                            become this.merge_sorted_impl(a, b, caller)
                        }
                    }
                }
            }
        }
    }

    proc mergesort(caller, iter) {
        let () = this.none_one_many(iter);
        match {
            (@none) => {
                let (empty) = this.empty();
                become caller(empty)
            }
            (@one, item) => {
                let (singleton) = this.once(item);
                become caller(singleton)
            }
            (@many, item1, item2, rest) => {
                let (aq, bq) = this.split(rest);
                let (aq) = this.cons(item1, aq);
                let (aq) = this.mergesort(aq);
                let (bq) = this.cons(item2, bq);
                let (bq) = this.mergesort(bq);
                let (mq) = this.merge_sorted(aq, bq);
                become caller(mq)
            }
        }
    }

    proc is_empty(caller, iter) {
        let (caller, iter) = this.super.fwd_req(caller, iter, @next);
        match {
            (@eos) => {
                become caller(iter, @ok, true)
            }
            (@yield, item) => {
                let (iter) = this.cons(item, iter);
                become caller(iter, @ok, false)
            }
        }
    }

    proc none_one_many(caller, iter) {
        let (iter) = iter(@next);
        match {
            (@eos) => {
                become caller(@none)
            }
            (@yield, item) => {
                let (iter) = iter(@next);
                match {
                    (@eos) => {
                        become caller(@one, item)
                    }
                    (@yield, item2) => {
                        become caller(@many, item, item2, iter)
                    }
                }
            }
        }
    }
}

proc fwd_req(next, up, down) {
    let (down) = down();
    match {
        (@req) => {
            let (up) = up(@req);
            become this.fwd_req(next, up, down)
        }
        (tag) => {
            become next(up, down, tag)
        }
    }
}

proc queue_empty(caller) {
    match {
        (@push_back, item) => {
            let (caller) = caller();
            become this.queue_cons(item, this.queue_empty, caller)
        }
        (@next) => {
            let (caller) = caller(@eos);
            become this.queue_empty(caller)
        }
    }
}

proc queue_cons(head, tail, caller) {
    match {
        (@push_back, item) => {
            let (tail) = tail(@push_back, item);
            let (caller) = caller();
            become this.queue_cons(head, tail, caller)
        }
        (@next) => {
            let (caller) = caller(@yield, head);
            become tail(caller)
        }
    }
}

proc stack_empty(caller) {
    match {
        (@push_front, item) => {
            let (caller) = caller();
            become this.stack_cons(item, this.stack_empty, caller)
        }
        (@next) => {
            let (caller) = caller(@eos);
            become this.stack_empty(caller)
        }
    }
}

proc stack_cons(head, tail, caller) {
    match {
        (@push_front, item) => {
            let (caller) = caller();
            become this.stack_cons(item, this.stack_cons&(head, tail), caller)
        }
        (@next) => {
            let (caller) = caller(@yield, head);
            become tail(caller)
        }
    }
}

proc list_empty(caller) {
    R{
        [caller]
        @nil caller @exec
    }
}


proc list_append(caller, head, tail) {
    R{
        [tail, head, caller]
        tail head #cons @cons #cons caller @exec
    }
}

proc list_snoc(caller, list) {
    let () = this.list_snoc(list);
    match {
        (@nil) => {
            become caller(@nil)
        }
        (@cons, t) => {
            let (h, t) = this.list_snoc(t);
            become caller(@cons, h, t)
        }
    }
}


proc bind(caller, inner, symbol, target) {
    let (inner) = inner();
    match {
        (@req, name) =>  {
            let (^, @ok, are_eq) = this.builtin.eq(*name, *symbol);
            if are_eq {
                let (target) = target();
                become this.bind(caller, inner, symbol, target )
            } else {
                let (caller) = caller(@req, name);
                become this.bind(caller, inner, symbol, target)
            }
        }
        (tag) => {
            let (caller) = caller(tag);
            become this.bind(caller, inner, symbol, target)
        }
    }
}

proc echo(caller) {
    let (caller) = caller(@req, @stdin);
    match {
        (@ok, char) => {
            let (caller) = caller(@req, @stdout, char);
            become this.echo(caller)
        }
        (@eof) => {
            let () = caller(@ok);
        }
    }
}

proc main(caller) {
    let (caller, ^, @ok) = this.fwd_req(caller, this.echo);
    
    let () = caller(@req, @halt);


    //    let (x) = this.tests.cases.split();
    //let (iter) = this.iter.symbol_chars&(@foobar);
    //let (^, @ok, aq, bq) = this.bind(this.iter.split, @iter, iter);
    //let (aq, @yield, 'f') = aq(@next);
    //let (aq, @yield, 'o') = aq(@next);
    //let (aq, @yield, 'a') = aq(@next);
    //let (aq, @eos) = aq(@next);
    //let (bq, @yield, 'o') = bq(@next);
    //let (bq, @yield, 'b') = bq(@next);
    //let (bq, @yield, 'r') = bq(@next);
    //let (bq, @eos) = bq(@next);
}