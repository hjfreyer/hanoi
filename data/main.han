
mod builtin {
    proc symbol_len(caller, symbol) {
        R{ 
            [symbol, caller]
            symbol #symbol_len @ok this.symbol_len caller @exec 
        }
    }

    proc symbol_char_at(caller, symbol, offset) {
        R{ 
            [offset, symbol, caller]
            symbol offset #symbol_char_at @ok this.symbol_char_at caller @exec 
        }
    }

    proc eq(caller, a, b) {
        R{ 
            [b, a, caller]
            a b #eq @ok this.eq caller @exec 
        }
    }

//    let symbol_char_at = {
//        bind caller;
//        bind symbol;
//        bind offset;
//            symbol offset #symbol_char_at caller #curry @exec
//    };
//
//    let eq = {
//        bind caller;
//        bind a;
//        bind b;
//        a b #eq caller #curry @exec
//    };
//
//    let add = {
//        bind a;
//        bind b;
//        bind caller;
//            a b #add @ok this.add caller #curry #curry #curry @exec
//    };

    proc add() {
        R{
            [a, b, caller]
            a b #add @ok this.add caller @exec
        }
    }
}

mod tests {
    proc enumerate(caller, @next) {
        let (caller, @next) = caller(@yield, @assert_true);
        let (caller, @next) = caller(@yield, @symbol_len);
        let (caller, @next) = caller(@yield, @symbol_iter);
            // let (caller, @next) = caller(@yield, @basic_csv);
            // let (caller, @next) = caller(@yield, @manually_drive_map);
        let () = caller(@eos);        
    }

    mod cases {
        proc assert_true(caller) {
            let () = caller(@pass);
        }

        proc symbol_len(caller) {
            let (_, @ok, 3) = this.super.super.builtin.symbol_len(@foo);
            let () = caller(@pass);
        }

        //let basic_csv = {
            //bind caller;
            //bind next;
                //caller next #curry
                //@"h,e\n" 0 this.super.super.iter.symbol_chars #curry #curry
                    //this.super.super.csv.parser #curry #curry @exec;
            //bind cont;
            //bind char;
            //bind tag;
            //bind caller;
            //bind next;
                //tag @fieldchar #assert_eq char 'h' #assert_eq caller next #curry cont #curry @exec;
            //bind cont;
            //bind tag;
            //bind caller;
            //bind next;
                //tag @nextfield #assert_eq caller next #curry cont #curry @exec;
            //bind cont;
            //bind char;
            //bind tag;
            //bind caller;
            //bind next;
                //tag @fieldchar #assert_eq char 'e' #assert_eq caller next #curry cont #curry @exec;
            //bind cont;
            //bind tag;
            //bind caller;
            //bind next;
                //tag @nextrow #assert_eq caller next #curry cont #curry @exec;
            //bind tag;
            //bind caller;
                //tag @end #assert_eq
                //@pass caller #curry @exec
        //};
//
        proc symbol_iter(caller) {
            let (^, @ok, iter) = this.super.super.iter.symbol_chars(@foo);
            let (cont, @yield, 'f') = iter(@next);
            let (cont, @yield, 'o') = cont(@next);
            let (cont, @yield, 'o') = cont(@next);
            let (cont, @eos) = cont(@next);
            let () = caller(@pass);
        }
        //let symbol_iter = {
            //bind caller;
            //bind next;
                //caller next #curry @"foo" 0 this.super.super.iter.symbol_chars #curry #curry #curry @exec;
            //bind char;
            //bind tag;
            //bind cont;
            //bind caller;
            //bind next;
                //tag @yield #assert_eq char 'f' #assert_eq caller next #curry cont #curry @exec;
            //bind cont;
            //bind char;
            //bind tag;
            //bind caller;
            //bind next;
                //tag @yield #assert_eq char 'o' #assert_eq caller next #curry cont #curry @exec;
            //bind cont;
            //bind char;
            //bind tag;
            //bind caller;
            //bind next;
                //tag @yield #assert_eq char 'o' #assert_eq caller next #curry cont #curry @exec;
            //bind tag;
            //bind caller;
                //tag @eos #assert_eq
                //@pass caller #curry @exec
        //};
//
        //let manually_drive_map = {
            //bind caller;
            //bind next;
                //caller next #curry this.super.super.iter.map #curry @exec;
            //bind cont;
            //bind reqiter;
            //bind caller;
            //bind next;
                //reqiter @requestiter #assert_eq
                //caller next #curry 1 @yield cont #curry #curry #curry @exec;
            //bind cont;
            //bind one;
            //bind reqfn;
            //bind caller;
            //bind next;
                //reqfn @requestfn #assert_eq one 1 #assert_eq
                //caller next #curry 2 @ok cont #curry #curry #curry @exec;
            //bind cont;
            //bind two;
            //bind yld;
            //bind caller;
            //bind next;
                //yld @yield #assert_eq two 2 #assert_eq
                //caller next #curry cont #curry @exec;
            //bind cont;
            //bind req;
            //bind caller;
            //bind next;
                //req @requestiter #assert_eq
                //caller next #curry @eos cont #curry #curry @exec;
            //bind eos;
            //bind caller;
                //eos @eos #assert_eq @pass caller #curry @exec
        //};
    }
//

    proc run(caller, case_name) {
        R{ @cases this #get #get @exec }
    }
}

mod csv {
    proc start(caller) {
        let (caller) = caller(@req, @iter, @next);
        match {
            (@eos) =>  {
                let () = caller(@eos);
            }
            (@yield, char) => {
                let (caller) = caller(@startrow);
                let (caller) = caller(@startfield);
                become this.default_handle_char(caller, char)
            }
        }
    }

    proc default_handle_char(caller) {
        match {
            ('\n') => {
                let (caller) = caller(@endfield);
                let (caller) = caller(@endrow);
                become this.start(caller)
            }
            ('"') => {
                become this.quoted(caller)
            }
            ('\\') => {
                become this.escaped(caller)
            }
            (char) => {
                let (caller) = caller(@yield, char);
                become this.non_quoted(caller)
            }
        }
    }

    proc non_quoted(caller) {
        let (caller) = caller(@req, @iter, @next);
        match {
            (@eos) => {
                let (caller) = caller(@endfield);
                let (caller) = caller(@endrow);
                let () = caller(@eos);
            }
            (@yield, char) => {
                become this.default_handle_char(caller, char)
            }
        }
    }

    proc quoted(caller) {
        let (caller) = caller(@req, @iter, @next);
        match {
            (@eos) => {
                let () = caller(@err, @nonterminatedquote);
            }
            (@yield, '"') => {
                become this.non_quoted(caller)
            }
            (@yield, char) => {
                let (caller) = caller();
                become this.default_handle_char(caller, char)
            }
        }
    }
}

mod iter {
    proc symbol_chars_inner(symbol, offset, caller, @next) {
        let (^, @ok, len) = this.super.builtin.symbol_len(*symbol);
        let (^, @ok, are_eq) = this.super.builtin.eq(*offset, len);
        if are_eq {
            let () = caller(@eos);
        } else {
            let (^, @ok, char) = this.super.builtin.symbol_char_at(*symbol, *offset);
            let (^, @ok, offset) = this.super.builtin.add(offset, 1);
            let () = caller(@yield, char);
            become this.symbol_chars_inner(symbol, offset)
        }
    }

    proc symbol_chars(symbol) {
        become this.symbol_chars_inner(symbol, 0)
    }

    proc map(caller, @next) {
        let (caller) = caller(@request, @iter, @next);
        match {
            (@eos) => {
                let () = caller(@eos);
            }
            (@yield, item) => {
                let (caller) = caller(@request, @fn, item);
                match {
                    (@ok, applied) => {
                        let () = caller(@yield, applied);
                        become this.map()
                    }
                }
            }
        }
    }
////      match caller(@requestiter) {
////            (caller, @eos) => {
////                let () = caller(@eos);
////            }
////            (caller, @yield, item) => {
////                match caller(@requestfn, item) {
////                    (@ok, applied, caller) => {
////                        let (caller) = caller(@yield, applied);
////                        this.map(caller)
////                    }
////                }
////            }
////        }
    //}
//
    //proc double(caller, x) {
        //let (_, ok, res) = this.add(*x, x);
        //let () = caller(@ok, res);
        //this.double()
    //}

    proc do_bind_iter(inner, symbol, iter, caller) {
        let (inner) = inner();
        match {
            (@req, name) =>  {
                let (^, @ok, are_eq) = this.super.builtin.eq(*name, *symbol);
                if are_eq {
                    let (iter) = iter();
                    become this.do_bind_iter(inner, symbol, iter, caller)
                } else {
                    let (caller) = caller(@req, name);
                    become this.do_bind_iter(inner, symbol, iter, caller)
                }
            }
            (tag) => {
                let (caller) = caller(tag);
                become this.do_bind_iter(inner, symbol, iter, caller)
                
            }
        }
    }

    //let bind_requestfn = {
        //bind fn;
        //bind inner;
        //bind caller;
            //fn inner this.do_bind_requestfn #curry #curry caller #curry @exec
    //};
//
    //proc do_bind_requestfn(inner, fn, caller) {
        //match inner() {
            //(inner, @request, @fn, input) => {
                //let (fn, caller, ok, applied) = this.do_bind_requestfn_call_fn(fn, caller, input);
                //this.do_bind_requestfn(inner, fn, caller, ok, applied)
            //}
            //(inner) => {
                //let (caller) = caller();
                //this.do_bind_requestfn(inner, fn, caller)
            //}
        //}
    //}
//
    //proc do_bind_requestfn_call_fn(metacaller, fn, caller) {
        //match fn() {
            //(fn, @ok, applied) => {
                //metacaller(fn, caller, @ok, applied)
            //}
            //(fn) => {
                //let (caller) = caller();
                //this.do_bind_requestfn_call_fn(metacaller, fn, caller)
            //}
        //}
    //}
}

proc remove_exec() {
    R{

    }
}


proc main() {
    let (iter) = this.iter.symbol_chars&(@"foo,bar
baz");
    let (bound) = this.iter.do_bind_iter&(this.csv.start, @iter, iter);

    let (bound, @startrow) = bound();
    let (bound, @startfield) = bound();
    let (bound, @yield, 'f') = bound();
    let (bound, @yield, 'o') = bound();
    let (bound, @yield, 'o') = bound();
    let (bound, @endfield) = bound();
    let (bound, @startfield) = bound();
    let (bound, @yield, 'b') = bound();
    let (bound, @yield, 'a') = bound();
    let (bound, @yield, 'r') = bound();
    let (bound, @endfield) = bound();
    let (bound, @endrow) = bound();
}


//let main = {
    //bind next;
        //this.iter.double this.iter.map next this.iter.bind_requestfn #curry #curry #curry @exec;
    //bind bound;
    //bind next;
        //@next next bound #curry #curry @exec;
//  
    //bind nxt;
    //bind iter;
    //bind req;
    //bind cont;
    //bind next;
        //req @request #assert_eq iter @iter #assert_eq nxt @next #assert_eq
        //1 @yield next cont @exec;
//
    //bind item;
    //bind yield;
    //bind continue;
    //bind next;
        //2 item #assert_eq yield @yield #assert_eq
        //@next next continue @exec;
//
    //bind nxt;
    //bind iter;
    //bind req;
    //bind cont;
    //bind next;
        //req @request #assert_eq iter @iter #assert_eq nxt @next #assert_eq
        //5 @yield next cont @exec;
//
    //bind item;
    //bind yield;
    //bind continue;
    //bind next;
        //10 item #assert_eq yield @yield #assert_eq
        //@next next continue @exec;
//
    //bind nxt;
    //bind iter;
    //bind req;
    //bind cont;
    //bind next;
        //req @request #assert_eq iter @iter #assert_eq nxt @next #assert_eq
        //@eos next cont @exec;
//    
    //bind eos;
    //bind continue;
    //bind next;
        //eos @eos #assert_eq @pass
//};