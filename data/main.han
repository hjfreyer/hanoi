
//mod builtin;
//mod io;
//mod ssv;
//mod iter;
//mod list;
//mod str;
//mod adv1p1;
//mod multi_iter;
//

sentence test {
    #call('tests::main)
}

mod tests {
    proc args main => args match {
        (#nil{}, #enumerate{}) => (#nil{}, #a{}),
        (#a{}, #next{}) => (#b{}, #some{@map_empty}),
        (#b{}, #next{}) => (#c{}, #some{@map_blah}),
        (#c{}, #next{}) => (#d{}, #none{}),

        (#nil{}, #run{@map_empty}) => () 'cases::map_empty,
        (#nil{}, #run{@map_blah}) => () 'cases::map_blah,
    }

    mod cases {
        proc () map_empty => {
            ()
        }
        proc () map_blah => {
            ()
        }
    }

    mod enumerate {
        proc () init => {
            @a
        }

        proc (closure, args) main => {
            let (@next, ()) = args;
            closure match {
                @a => (@b, (@res, (@some, @map_empty))),
            }
        }
    }
}

sentence add {
    #untuple(2) #add
}

sentence eq {
    #untuple(2) #eq
}

proc x double => {
    (*x, x) 'add
}

mod ints {
    proc () alloc => {
        (@start, 0)
    }

    proc ((@start, s), @next) main => {
        let ^ = 3;
        let res = (@some, *s);
        ((@start, (s, 1) 'super::add), res)
    }
}

proc () main_impl => {
    // let m = () 'map::alloc;
    // let (m, (@iter, (@next, ()))) = (m, (@next, ())) 'map::main;
    // let (m, (@fn, (@apply, 3))) = (m, (@some, 3)) 'map::main;
    // let (m, (@res, (@some, 6))) = (m, 6) 'map::main;
    // let (m, (@iter, (@next, ()))) = (m, (@next, ())) 'map::main;
    // let (m, (@fn, (@apply, 7))) = (m, (@some, 7)) 'map::main;
    // let (m, (@res, (@some, 14))) = (m, 14) 'map::main;
    // let (m, (@iter, (@next, ()))) = (m, (@next, ())) 'map::main;
    // let (^, (@res, (@none, ()))) = (m, (@none, ())) 'map::main;

    let ((@nil, ()), test_iter) = ((@nil, ()), (@enumerate, ())) 'tests::main;
    let (test_iter, (@some, @map_empty)) = (test_iter, (@next, ())) 'tests::main;
    let ^ = test_iter;

    ()
}

sentence main {
    #tuple(0) #call('main_impl)
}

