
mod builtin;
mod iter;

mod tests {
    proc enumerate(caller, @next) {
        let (caller, @next) = caller(@yield, @parseint);
        let (caller, @next) = caller(@yield, @str2);
        let (caller, @next) = caller(@yield, @split_lines_empty);
        let (caller, @next) = caller(@yield, @split_lines);
        let () = caller(@eos);
    }

    mod cases {
        proc parseint(caller) {
            let (parseint) = this.super.super.parseint();
            let (@req, parseint, @next) = parseint(@get);
            let (@req, parseint, @next) = parseint(@yield, '6');
            let (@req, parseint, @next) = parseint(@yield, '7');
            let (@req, parseint, @next) = parseint(@yield, '2');
            let (@end, @ok, 672) = parseint(@eos);

            let () = caller(@pass);
        }

        proc str2(caller) {
            let (input) = this.super.super.iter.symbol_chars(@foo);
            let (u) = this.super.super.builtin.compose(input, this.super.super.str_to_str2_start);

            let (@resp, u, @start) = u(@next);
            let (@resp, u, 'f') = u(@req, @copy);
            let (@resp, u, @start) = u(@next);
            let (@resp, u, 'o') = u(@req, @copy);
            let (@resp, u, @start) = u(@next);
            let (@end, @eos) = u(@next);
            
            let () = caller(@pass);
        }

        proc split_lines_empty(caller) {
            let (input) = this.super.super.iter.empty();
            let (u) = this.super.super.split_lines(input);
            let (@resp, u, @yield, line1) = u(@next);
            let (@end, @eos) = line1(@next);

            let (@end, @eos) = u(@next);
            
            let () = caller(@pass);
        }

        proc split_lines(caller) {
            let (input) = this.super.super.iter.symbol_chars(@"foo
bar
");
            let (u) = this.super.super.split_lines(input);
            let (@resp, u, @yield, line1) = u(@next);
            let (@resp, line1, @yield, 'f') = line1(@next);
            let (@resp, line1, @yield, 'o') = line1(@next);
            let (@resp, line1, @yield, 'o') = line1(@next);
            let (@end, @eos) = line1(@next);

            let (@resp, u, @yield, line2) = u(@next);
            let (@resp, u, @yield, line3) = u(@next);
            let (@end, @eos) = u(@next);

            let (@resp, line2, @yield, 'b') = line2(@next);
            let (@resp, line2, @yield, 'a') = line2(@next);

            let (@end, @eos) = line3(@next);

            let (@resp, line2, @yield, 'r') = line2(@next);
            let (@end, @eos) = line2(@next);
            
            let () = caller(@pass);
        }
    }

    proc run(caller, case_name) {
        R{ @cases this #get #get @exec }
    }
}

proc symbol_chars_inner(symbol, offset, caller, @next) {
    let (len) = this.builtin.symbol_len(*symbol);
    let (are_eq) = this.builtin.eq(*offset, len);
    if are_eq {
        become caller(@end, @eos)
    } else {
        let (char) = this.builtin.symbol_char_at(*symbol, *offset);
        let (offset) = this.builtin.add(offset, 1);
        let () = resp caller(@yield, char);
        become this.symbol_chars_inner(symbol, offset)
    }
}

proc symbol_chars(caller, symbol) {
    become caller(this.symbol_chars_inner&(symbol, 0))
}

proc str_to_str2_start(caller, @next) {
    let (caller) = req caller(@next);
    match {
        (@eos) => {
            become caller(@end, @eos)
        }
        (@yield, char) => {
            let () = resp caller(@start);
            become this.str_to_str2_loop(char)
        }
    }
}

proc str_to_str2_loop(char, caller) {
    match {
        (@next) => {
            let (caller) = req caller(@next);
            match {
                (@eos) => {
                    become caller(@end, @eos)
                }
                (@yield, newchar) => {
                    let () = resp caller(@start);
                    become this.str_to_str2_loop(newchar)
                }
            }
        }
        (@req, @copy) => {
            let () = resp caller(*char);
            become this.str_to_str2_loop(char)
        } 
    }
}

proc str_to_str2_loop(char, caller) {
    match {
        (@next) => {
            let (caller) = req caller(@next);
            match {
                (@eos) => {
                    become caller(@end, @eos)
                }
                (@yield, newchar) => {
                    let () = resp caller(@start);
                    become this.str_to_str2_loop(newchar)
                }
            }
        }
        (@req, @copy) => {
            let () = resp caller(*char);
            become this.str_to_str2_loop(char)
        } 
    }
}

proc split_lines(caller, str_iter) {
    let (delim) = this.add_line_delimiters&(str_iter);
    let (split) = this.iter.split&(delim);
    become caller(split)
}


proc add_line_delimiters(str_iter, caller, @next) {
    let (caller) = this.builtin.fwd_req(caller, str_iter, @next);
    match {
        (@end, @eos) => {
            become caller(@end, @eos)
        }
        (@resp, str_iter) => {
            match {
                (@yield, '\n') => {
                    let () = resp caller(@yield, @delimiter);
                    become this.add_line_delimiters(str_iter)
                }
                (@yield, other) => {
                    let () = resp caller(@yield, @non_delimiter, other);
                    become this.add_line_delimiters(str_iter)
                }
            }
        }
    }
}
proc parseint(caller) {
    become caller(this.parseint_loop&(0))
}

proc parseint_loop(acc, caller, @get) {
    let (caller) = req caller(@next);
    match {
        (@yield, char) => {
            let (ord) = this.builtin.ord(char);
            let (digit) = this.builtin.sub(ord, 48);
            let (acc) = this.builtin.prod(acc, 10);
            let (acc) = this.builtin.add(acc, digit);
            become this.parseint_loop(acc, caller, @get)
        }
        (@eos) => {
            become caller(@end, @ok, acc)
        }
    }
}