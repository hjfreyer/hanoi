
proc symbol_len(caller, symbol) {
    R{ 
        [symbol, caller]
        symbol #symbol_len @ok this.symbol_len caller @exec 
    }
}

proc symbol_char_at(caller, symbol, offset) {
    R{ 
        [offset, symbol, caller]
        symbol offset #symbol_char_at @ok this.symbol_char_at caller @exec 
    }
}

proc eq(caller, a, b) {
    R{ 
        [b, a, caller]
        a b #eq @ok this.eq caller @exec 
    }
}

proc lt(caller, a, b) {
    R{ 
        [b, a, caller]
        a b #lt caller @exec 
    }
}

proc add() {
    R{
        [a, b, caller]
        a b #add caller @exec
    }
}

proc sub() {
    R{
        [b, a, caller]
        a b #sub caller @exec
    }
}

proc prod() {
    R{
        [a, b, caller]
        a b #prod caller @exec
    }
}

proc ord() {
    R{
        [a, caller]
        a #ord caller @exec
    }
}

proc cons() {
    R{
        [b, a, caller]
        a b #cons caller @exec
    }
}
proc snoc() {
    R{
        [a, caller]
        a #snoc caller @exec
    }
}

proc bind_impl(inner, symbol, target, caller) {
    let (inner) = inner();
    match {
        (@req, name) =>  {
            let (^, @ok, are_eq) = this.eq(*name, *symbol);
            if are_eq {
                let (caller, target) = this.fwd_req(caller, target);
                become this.bind_impl(inner, symbol, target, caller)
            } else {
                let (caller) = caller(@req, name);
                become this.bind_impl(inner, symbol, target, caller)
            }
        }
        (@resp) => {
            let (caller) = caller(@resp);
            become this.bind_impl(inner, symbol, target, caller)
        }
    }
}

proc bind(caller, inner, symbol, target) {
    become caller(this.bind_impl&(inner, symbol, target))
}

proc bind2_impl(inner, inner_symbol, target, target_symbol, caller) {
    let (inner) = inner();
    match {
        (@req, name) =>  {
            let (^, @ok, are_eq) = this.eq(*name, *inner_symbol);
            if are_eq {
                let (caller, target) = this.fwd_req(caller, target, @req, *target_symbol);
                become this.bind2_impl(inner, inner_symbol, target, target_symbol, caller)
            } else {
                let (caller) = caller(@req, name);
                become this.bind2_impl(inner, inner_symbol, target, target_symbol, caller)
            }
        }
        (@resp) => {
            let (caller) = caller(@resp);
            become this.bind2_impl(inner, inner_symbol, target, target_symbol, caller)
        }
    }
}

proc bind2(caller, inner, inner_symbol, target, target_symbol) {
    become caller(this.bind_impl2&(inner, inner_symbol, target, target_symbol))
}

proc fwd_req(next, up, down) {
    let (down) = down();
    match {
        (@req) => {
            let (up) = up(@req);
            become this.fwd_req(next, up, down)
        }
        (@resp) => {
            become next(up, down)
        }
    }
}
