WHITESPACE = _{ " " | "\n" }

COMMENT = _{ "//" ~ (!NEWLINE ~ ANY)* }

// FILE STRUCTURE

file = { SOI ~ header ~ decl* ~ EOI }

header = _{ ns_import* }

ns_import = _{ "mod" ~ identifier ~ ";" }

namespace = { decl* }

// code_decl = { "let" ~ identifier ~ "=" ~ "{" ~ code ~ "}" ~ ";" }

ns_decl = { "mod" ~ identifier ~ "{" ~ namespace ~ "}" }

decl = { sentence_decl }
// { ns_decl | proc_decl }

// END FILE STRUCTURE

// LITERALS

nil = { "nil" }

bool = { "true" | "false" }

int = @{ ASCII_DIGIT+ }

char_lit = ${ "'" ~ lit_char ~ "'" }
lit_char = @{
    !("'" | "\\") ~ ANY
  | "\\" ~ ("'" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
  | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

identifier   = @{ id_non_digit ~ (id_non_digit | ASCII_DIGIT)* }
id_non_digit = _{ ASCII_ALPHA | "_" }

symbol = { "@" ~ (identifier | string) }

string    = ${ "\"" ~ str_inner ~ "\"" }
str_inner = @{ str_char* }
str_char  =  {
    !("\"" | "\\") ~ ANY
  | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
  | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

literal = { bool | int | char_lit | symbol | nil }

// END LITERALS

raw_statement = { "R" ~ "{" ~ sentence ~ "}" }
raw_word      = {
    stack_bindings // | "{" ~ sentence ~ "}"
  // | value_expr
  // | builtin_func_call

  | value_expr
  | builtin
  | label_call
}

stack_bindings = {
    "[" ~ "]"
  | "[" ~ binding ~ ("," ~ binding)* ~ "]"
}

sentence = { raw_word* }

builtin = { "#" ~ identifier ~ builtin_args? }

builtin_args = _{
    "(" ~ builtin_arg ~ ("," ~ builtin_arg)* ~ ")"
}
builtin_arg  =  { label | int }

builtin_func_call = { "#" ~ identifier ~ "(" ~ int ~ ")" }

// delete = { "^" ~ identifier }

copy = { "*" ~ identifier }

// expr = { path | literal | func_call | identifier | builtin | delete | copy }

path = { "this" ~ ("." ~ identifier)* }

// sentence      = { sentence_body }
// sentence_body = { expr* }

// and_then = { sentence ~ ";" ~ code }

// if_statement = { sentence ~ "if" ~ "{" ~ code ~ "}" ~ "else" ~ "{" ~ code ~ "}" }

// bind = { "bind" ~ identifier ~ ";" ~ code }

// match_block = { "match" ~ "(" ~ int ~ ")" ~ "{" ~ match_cases ~ "}" ~ "else" ~ "{" ~ code ~ "}" }

// match_cases = { match_case* }
// match_case  = { literal ~ "=>" ~ "{" ~ code ~ "}" }

// code = { bind | and_then | if_statement | match_block | sentence }

// code_decl = { "let" ~ identifier ~ "=" ~ "{" ~ code ~ "}" ~ ";" }

// Proc syntax

proc_decl          = { "proc" ~ identifier ~ proc_args_and_body }
proc_args_and_body = { bindings ~ "{" ~ block ~ "}" }

bindings = {
    "(" ~ ")"
  | "(" ~ binding ~ ("," ~ binding)* ~ ")"
}
binding  = { tuple_binding | drop_binding | literal | identifier }

drop_binding = { "^" }
tuple_binding = {
  "(" ~ ")"
  |"(" ~ binding ~ ("," ~ binding)* ~ ")"
}

// match_decl = { "match_proc" ~ identifier ~ "{" ~ match_cases ~ "}" }

block      = { statements ~ endpoint }
statements = { statement* }

statement = _{ let_statement }

let_statement = { "let" ~ bindings ~ "=" ~ expr ~ ";" }

endpoint    = _{ become | raw_statement | if_endpoint | match_block | unreachable }
become      =  { "become" ~ func_call }
unreachable =  { "" }

if_endpoint = {
    "if" ~ value_expr ~ "{" ~ block ~ "}" ~ "else" ~ "{" ~ block ~ "}"
}

expr = _{ request_call | response_call | func_call | value_expr }

request_call  = { "req" ~ func_call_inner }
response_call = { "resp" ~ func_call_inner }

func_call        =  { func_call_inner }
func_call_inner  = _{ func_name ~ func_call_args }
func_name        = _{ func_name_copied | path | identifier }
func_name_copied =  { "(" ~ "*" ~ identifier ~ ")" }

func_call_args = {
    "(" ~ ")"
  | "(" ~ value_expr ~ ("," ~ value_expr)* ~ ")"
}

closure = {
    func_name ~ "&" ~ func_call_args
}

tuple_expr = {
    "(" ~ ")"
  | "(" ~ value_expr ~ ("," ~ value_expr) ~ ")"
}

value_expr = {
    closure
  | literal
  | tuple_expr
  | copy
  | path
  | identifier
}

match_block = { "match" ~ "{" ~ match_cases ~ "}" }

match_cases = _{ match_case* }
match_case  =  { bindings ~ "=>" ~ "{" ~ block ~ "}" }

label = { "'" ~ identifier }

label_call = {
    "'" ~ identifier
  | "'" ~ identifier ~ ("::" ~ identifier)*
}

// New stuff

sentence_decl = {
    "sentence" ~ label ~ "{" ~ sentence ~ "}"
}
